---------------------------------------
file structure

app
app/build
app/src
app/src/androidTest
app/src/main

com.example.seatsight
com.example.seatsight.data
com.example.seatsight.data.api
com.example.seatsight.data.api.AuthService
com/example/seatsight/data/api/BookingService.kt
com.example.seatsight.data.api.HotelService
com.example.seatsight.data.api.RestaurantService
com.example.seatsight.data.api.SeatTrackingService
com/example/seatsight/data/api/ViewSeatRoutes.kt
com.example.seatsight.data.model
com/example/seatsight/data/model/AuthModels.kt
com/example/seatsight/data/model/BookingModels.kt
com/example/seatsight/data/model/HotelDetails.kt
com.example.seatsight.data.model.RealtimeSeatStatus
com/example/seatsight/data/model/RestaurantModels.kt
com.example.seatsight.data.model.Seat
com/example/seatsight/data/model/SeatTrackingModels.kt
com.example.seatsight.data.model.ViewSeatResponse
com.example.seatsight.data.network
com.example.seatsight.data.network.RetrofitClient
com.example.seatsight.data.network.SseEventSource
com.example.seatsight.data.repository
com.example.seatsight.data.repository.AuthRepository
com.example.seatsight.data.repository.BookingRepository
com.example.seatsight.data.repository.HotelRepository
com/example/seatsight/data/repository/RealtimeSeatRepository.kt.kt
com.example.seatsight.data.repository.RestaurantRepository
com.example.seatsight.data.repository.ViewSeatRepository
com/example/seatsight/data/HotelInfo.kt
com.example.seatsight.UI
com.example.seatsight.UI.authentication
com/example/seatsight/UI/authentication/authentication-home.kt
com/example/seatsight/UI/authentication/login.kt
com/example/seatsight/UI/authentication/register.kt
com.example.seatsight.UI.viewmodel
com.example.seatsight.ui.viewmodel.AuthViewModel
com.example.seatsight.ui.viewmodel.AuthViewModelFactory
HotelViewModel
com.example.seatsight.UI.viewmodel.HotelViewModelFactory
com/example/seatsight/UI/viewmodel/RealtimeSeatViewModel.kt
com/example/seatsight/UI/BookSeatFinal.kt
com/example/seatsight/UI/bookSeatHotelAvailbility.kt
com/example/seatsight/UI/BookSeatScreen.kt
com/example/seatsight/UI/HomeScreen.kt
com/example/seatsight/UI/listAndDisplayHotelAvailability.kt
com/example/seatsight/UI/viewSeatHotelSelector.kt
com/example/seatsight/UI/viewSeatScreen.kt
com/example/seatsight/UI/welcomeScreen.kt
com.example.seatsight.ui.theme
com/example/seatsight/MainActivity.kt
com/example/seatsight/seatSightDestinations.kt
com.example.seatsight.SharedPreferenceOnboardingProcess

---------------------------------------------------------------------------------

MainActivity.kt

//package com.example.seatsight
//
//import BookingConfirmationScreen
//import android.net.Uri
//import android.os.Bundle
//import android.util.Log
//import androidx.activity.ComponentActivity
//import androidx.activity.compose.setContent
//import androidx.activity.enableEdgeToEdge
//import androidx.compose.foundation.layout.padding
//import androidx.compose.material3.Scaffold
//
//import androidx.compose.runtime.Composable
//import androidx.compose.runtime.remember
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.platform.LocalContext
//import androidx.navigation.NavType
//import androidx.navigation.compose.NavHost
//import androidx.navigation.compose.composable
//import androidx.navigation.compose.rememberNavController
//import androidx.navigation.navArgument
//import com.example.seatsight.UI.BookSeatScreen
//import com.example.seatsight.UI.BookSeatWindow
//import com.example.seatsight.UI.ViewSeatsScreen
//import com.example.seatsight.UI.authentication.AuthHome
//import com.example.seatsight.UI.authentication.LoginScreen
//import com.example.seatsight.UI.authentication.RegisterScreen
//import com.example.seatsight.UI.homescreen
//import com.example.seatsight.UI.welcomeScreen
//import com.example.seatsight.ui.theme.SeatsightTheme
//
//class MainActivity : ComponentActivity() {
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        enableEdgeToEdge()
//        setContent {
//            SeatSightApp()
//            }
//        }
//    }
//
//
//
//
//@Composable
//fun SeatSightApp(){
//    SeatsightTheme {
//
//
//
//        val navController = rememberNavController()
//
//        val context = LocalContext.current
//        val appPreferences = remember { SharedPreferenceOnboardingProcess(context) }
//        val startDestination = if(appPreferences.isWelcomeScreenCompleted){
//            AuthScreen.route
//        }else {
//            Welcome.route
//        }
//        Scaffold { innerPadding ->
//
//            NavHost(
//                navController = navController,
//                startDestination = startDestination,
//                modifier = Modifier.padding(innerPadding)
//            ){
//
//                composable(route = Welcome.route){
//                    welcomeScreen(
//                        onClickContinue = {
//                            appPreferences.isWelcomeScreenCompleted=true
//                            navController.navigate(AuthScreen.route){
//                                popUpTo(Welcome.route) {
//                                    inclusive = true
//                                }
//                            }
//                        }
//                    )
//                }
//
//
//
//                composable(route = AuthScreen.route){
//                    AuthHome(navController = navController)
//                }
//
//                composable(route = LoginScreen.route){
//                    LoginScreen(navController = navController) // Pass navController
//                }
//
//                composable(route = RegisterScreen.route){
//                    RegisterScreen(navController = navController) // Pass navController
//                }
//
//                    composable(route = Home.route){
//                        homescreen(navController = navController)
//                }
//
//                composable(route = ViewSeatAvailableHotelList.route) {
//                    ViewSeatAvailableHotelList.screen()
//                }
//
////                composable(route = AvailableHotelsForBookSeat.route){
////                    AvailableHotelsForBookSeat.screen()
////                }
//
//                composable(
//                    route = "viewSeatScreen/{hotelName}/{restaurantId}",
//                    arguments = listOf(
//                        navArgument("hotelName") { type = NavType.StringType },
//                        navArgument("restaurantId") { type = NavType.IntType }
//                    )
//                ) { backStackEntry ->
//                    val hotelName = Uri.decode(backStackEntry.arguments?.getString("hotelName") ?: "") // ✅ Decode here
//                    val restaurantId = backStackEntry.arguments?.getInt("restaurantId") ?: 0
//
//                    Log.d("NavHost", "Navigating to ViewSeatsScreen with hotel: $hotelName, id: $restaurantId") // ✅ Debug log
//
//                    ViewSeatsScreen(
//                        hotelName = hotelName,
//                        restaurantId = restaurantId,
//                        navController = navController
//                    )
//                }
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//                composable(route = AvailableHotelsForBookSeat.route) {
//                        BookSeatWindow(navController = navController)
//                    }
//
//                // Navigate to BookSeatScreen with dynamic hotel name
//                composable(
//                    route = "bookSeatScreen/{hotelName}/{restaurantId}", // ✅ Ensure both parameters are in route
//                    arguments = listOf(
//                        navArgument("hotelName") { type = NavType.StringType },
//                        navArgument("restaurantId") { type = NavType.IntType } // ✅ Ensure restaurantId is extracted as an Int
//                    )
//                ) { backStackEntry ->
//                    val hotelName = backStackEntry.arguments?.getString("hotelName") ?: ""
//                    val restaurantId = backStackEntry.arguments?.getInt("restaurantId") ?: 0 // ✅ Extract restaurantId safely
//
//                    Log.d("NavHost", "Extracted restaurantId: $restaurantId") // ✅ Debugging log
//
//                    bookSeatScreen.screen(
//                        mapOf(
//                            "hotelName" to hotelName,
//                            "restaurantId" to restaurantId.toString() // ✅ Pass restaurantId as a string
//                        ),
//                        navController
//                    )
//                }
//
//
//                // Navigate to BookingConfirmationScreen with selected seats
//                composable(route = bookingConfirmation.route) { backStackEntry ->
//                    val hotelName = backStackEntry.arguments?.getString("hotelName") ?: ""
//                    val selectedSeats = backStackEntry.arguments?.getString("selectedSeats") ?: ""
//
//                    bookingConfirmation.screen(
//                        mapOf(
//                            "hotelName" to hotelName,
//                            "selectedSeats" to selectedSeats
//                        ),
//                        navController
//                    )
//                }
//
//
//            }
//
//        }
//
//    }
//
//
//}
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//@Composable
//private fun ViewSeatDisplay(
//    modifier: Modifier =Modifier,
//
//
//    ){
//
//}
//
//
//
//
////?????????????????????????????????????????????
//// preview section
////........
////...
////..
////?????????????????????????????????????????????
//
//
////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
////Preview section for homescreen composable
////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//
////@Preview
////@Composable
////fun homescreenPreview() {
////    SeatsightTheme {
////        homescreen(viewSeatButtonClicked = {}, bookSeatButtonClicked = {})
////    }
////
////}
//
//////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//////Preview section for welcomescreen composable
//////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
////@Preview
////@Composable
////fun welcome(){
////    SeatsightTheme {
////        welcomeScreen()
////    }
////}
//
//
//
////@Preview
////@Composable
////fun com.example.seatsight.UI.bookSeatWindow(){
////    SeatsightTheme {
////        com.example.seatsight.UI.BookSeatWindow()
////    }
////}

package com.example.seatsight

import BookingConfirmationScreen
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.example.seatsight.UI.BookSeatScreen
import com.example.seatsight.UI.BookSeatWindow
import com.example.seatsight.UI.ViewSeatsScreen
import com.example.seatsight.UI.authentication.AuthHome
import com.example.seatsight.UI.authentication.LoginScreen
import com.example.seatsight.UI.authentication.RegisterScreen
import com.example.seatsight.UI.homescreen
import com.example.seatsight.UI.welcomeScreen
import com.example.seatsight.ui.theme.SeatsightTheme
import com.example.seatsight.ViewSeatAvailableHotelList

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            SeatSightApp()
        }
    }
}

@Composable
fun SeatSightApp(){
    SeatsightTheme {
        val navController = rememberNavController()
        val context = LocalContext.current
        val appPreferences = remember { SharedPreferenceOnboardingProcess(context) }
        val startDestination = if(appPreferences.isWelcomeScreenCompleted){
            AuthScreen.route
        } else {
            Welcome.route
        }
        Scaffold { innerPadding ->
            NavHost(
                navController = navController,
                startDestination = startDestination,
                modifier = Modifier.padding(innerPadding)
            ){
                composable(route = Welcome.route){
                    welcomeScreen(
                        onClickContinue = {
                            appPreferences.isWelcomeScreenCompleted = true
                            navController.navigate(AuthScreen.route){
                                popUpTo(Welcome.route) { inclusive = true }
                            }
                        }
                    )
                }
                composable(route = AuthScreen.route){
                    AuthHome(navController = navController)
                }
                composable(route = LoginScreen.route){
                    LoginScreen(navController = navController)
                }
                composable(route = RegisterScreen.route){
                    RegisterScreen(navController = navController)
                }
                composable(route = Home.route){
                    homescreen(navController = navController)
                }
                // Updated navigation for ViewSeatAvailableHotelList:
                composable(route = ViewSeatAvailableHotelList.route) {
                    // Call dynamic destination screen with an empty parameter map and pass the navController.
                    ViewSeatAvailableHotelList.screen(emptyMap(), navController)
                }


                composable(
                    route = "viewSeatScreen/{hotelName}/{restaurantId}",
                    arguments = listOf(
                        navArgument("hotelName") { type = NavType.StringType },
                        navArgument("restaurantId") { type = NavType.IntType }
                    )
                ) { backStackEntry ->
                    val hotelName = Uri.decode(backStackEntry.arguments?.getString("hotelName") ?: "")
                    val restaurantId = backStackEntry.arguments?.getInt("restaurantId") ?: 0
                    Log.d("NavHost", "Navigating to ViewSeatsScreen with hotel: $hotelName, id: $restaurantId")
                    ViewSeatsScreen(
                        hotelName = hotelName,
                        restaurantId = restaurantId,
                        navController = navController
                    )
                }


                composable(route = AvailableHotelsForBookSeat.route){
                    BookSeatWindow(navController = navController)
                }


                composable(
                    route = "bookSeatScreen/{hotelName}/{restaurantId}",
                    arguments = listOf(
                        navArgument("hotelName") { type = NavType.StringType },
                        navArgument("restaurantId") { type = NavType.IntType }
                    )
                ) { backStackEntry ->
                    val hotelName = backStackEntry.arguments?.getString("hotelName") ?: ""
                    val restaurantId = backStackEntry.arguments?.getInt("restaurantId") ?: 0
                    Log.d("NavHost", "Extracted restaurantId: $restaurantId")
                    bookSeatScreen.screen(
                        mapOf(
                            "hotelName" to hotelName,
                            "restaurantId" to restaurantId.toString()
                        ),
                        navController
                    )
                }
                composable(route = bookingConfirmation.route) { backStackEntry ->
                    val hotelName = backStackEntry.arguments?.getString("hotelName") ?: ""
                    val selectedSeats = backStackEntry.arguments?.getString("selectedSeats") ?: ""
                    bookingConfirmation.screen(
                        mapOf(
                            "hotelName" to hotelName,
                            "selectedSeats" to selectedSeats
                        ),
                        navController
                    )
                }
            }
        }
    }
}



-------------------------------------

seatSightDestinations.kt

package com.example.seatsight

import BookingConfirmationScreen
import android.util.Log
import com.example.seatsight.UI.BookSeatWindow
import androidx.compose.runtime.Composable
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.BookSeatScreen
import com.example.seatsight.UI.ViewSeatsWindow
import com.example.seatsight.UI.authentication.AuthHome
import com.example.seatsight.UI.authentication.LoginScreen
import com.example.seatsight.UI.authentication.RegisterScreen
import com.example.seatsight.UI.homescreen
//import com.example.seatsight.UI.viewSeatWindow


interface dynamicseatSightDestinations {
    val route: String
    var screen: @Composable (Map<String, String>, NavController) -> Unit // Now accepts NavController
}



interface seatSightDestinations {


    val route: String
    var screen: @Composable () -> Unit
    val trueOrFalse: Boolean
        get() = true
}


//welcome route
object Welcome : seatSightDestinations{

    override val route: String = "welcome"
    override var screen : @Composable () -> Unit ={  }
}

//authentication route
object AuthScreen : seatSightDestinations {
    override val route: String = "AuthHome"
    override var screen: @Composable () -> Unit = {
        val navController = rememberNavController()
        AuthHome(navController = navController)}

}

object LoginScreen : seatSightDestinations {
    override val route: String = "LoginScreen"
    override var screen: @Composable () -> Unit = {
        val navController = rememberNavController()
        LoginScreen(navController = navController)}

}

object RegisterScreen : seatSightDestinations {
    override val route: String = "RegisterScreen"
    override var screen: @Composable () -> Unit = {
        val navController = rememberNavController()
        RegisterScreen(navController = navController)
    }

}


//homescreen route
object Home : seatSightDestinations{
    override val route: String = "homeScreen"
    override var screen : @Composable () -> Unit = {
        val navController = rememberNavController()
        homescreen(navController = navController)}
}


//seats viewing route
//object ViewSeatAvailableHotelList: seatSightDestinations{
//    override val route: String ="viewSeatAvailableSeatList"
//    override var screen: @Composable () -> Unit = { viewSeatWindow() }
//
//}




object ViewSeatAvailableHotelList : dynamicseatSightDestinations {
    override val route: String = "viewSeatAvailableHotelList"
    override var screen: @Composable (Map<String, String>, NavController) -> Unit = { _, navController ->
        // Passing the navController to ViewSeatsWindow
        ViewSeatsWindow(navController = navController)
    }
}






// book seats screen route
object AvailableHotelsForBookSeat : seatSightDestinations {
    override val route: String = "availableHotelsForBookSeats"
    override var screen: @Composable () -> Unit = {
        val navController = rememberNavController()
        BookSeatWindow(navController = navController) }

}



















object bookSeatScreen : dynamicseatSightDestinations {
    override val route: String = "bookSeatScreen/{hotelName}/{restaurantId}" // ✅ Ensure parameter names match exactly

    override var screen: @Composable (Map<String, String>, NavController) -> Unit = { params, navController ->
        val hotelName = params["hotelName"] ?: ""
        val restaurantId = params["restaurantId"]?.toIntOrNull() ?: 0 // ✅ Extract properly


        Log.d("bookSeatScreen", "Raw restaurantId from params: ${params["restaurantId"]}") // ✅ Debug log
        Log.d("bookSeatScreen", "Parsed restaurantId: $restaurantId") // ✅ Debug log

        BookSeatScreen(
            hotelName = hotelName,
            restaurantId = restaurantId, // ✅ Pass correctly
            navController = navController
        )
    }
}







object bookingConfirmation : dynamicseatSightDestinations {
    override val route: String = "bookingConfirmation/{hotelName}/{selectedSeats}/{selectedMenu}"

    override var screen: @Composable (Map<String, String>, NavController) -> Unit = { params, navController ->
        val hotelName = params["hotelName"] ?: ""
        val selectedSeats = params["selectedSeats"]?.split(",")?.toSet() ?: emptySet()
        val selectedMenuRaw = params["selectedMenu"] ?: ""
        Log.d("Navigation", "Raw selectedMenu before parsing: $selectedMenuRaw")

// ✅ Correctly split using `;` instead of `,`
        val selectedMenu = selectedMenuRaw.split(";").mapNotNull { item ->
            val parts = item.split(" x")
            if (parts.size == 2) {
                parts[0].replace("_", " ").trim() to parts[1].trim().toInt() // ✅ Restore spaces
            } else null
        }.toMap()

        BookingConfirmationScreen(
            hotelName = hotelName,
            selectedSeats = selectedSeats,
            selectedMenu = selectedMenu,
            onConfirm = {
                navController.popBackStack()
            }
        )
    }
}








-------------------------------------

SharedPreferenceOnboardingProcess.kt

package com.example.seatsight

import android.content.Context

class SharedPreferenceOnboardingProcess(context : Context) {
    private val sharedPreferences = context.getSharedPreferences("SharedPreferenceOnboardingProcess",Context.MODE_PRIVATE)

var isWelcomeScreenCompleted : Boolean
    get() = sharedPreferences.getBoolean("isWelcomeScreenCompleted",false)
    set(value) {
        sharedPreferences.edit().putBoolean("isWelcomeScreenCompleted", value).apply()
    }
}




-------------------------------------

AuthService.kt

package com.example.seatsight.data.api

import com.example.seatsight.data.model.LoginRequest
import com.example.seatsight.data.model.LoginResponse
import com.example.seatsight.data.model.RegisterRequest
import com.example.seatsight.data.model.RegisterResponse
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.POST

interface AuthService {
    @POST("api/customers/login")
    suspend fun login(@Body request: LoginRequest): Response<LoginResponse>

    @POST("api/customers/register")  // ✅ Backend will auto-assign "customer"
    suspend fun register(@Body request: RegisterRequest): Response<RegisterResponse>
}




-------------------------------------

HotelService.kt

package com.example.seatsight.data.api

import com.example.seatsight.data.model.HotelResponse
import com.example.seatsight.data.model.MenuItem
import com.example.seatsight.data.model.Seat
import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Path

interface HotelService {
    @GET("/api/restaurants/android/hotels-menu") // ✅ Get list of available hotels
    suspend fun getHotels(): Response<List<HotelResponse>>

    @GET("/api/seats/{restaurant_id}") // ✅ Ensure correct API path
    suspend fun getSeats(@Path("restaurant_id") restaurantId: Int): Response<List<Seat>>

    @GET("/api/menu/{restaurant_id}") // ✅ Updated menu API path
    suspend fun getMenu(@Path("restaurant_id") restaurantId: Int): Response<List<MenuItem>>

}




-------------------------------------

BookingService.kt

package com.example.seatsight.data.api



import com.example.seatsight.data.model.BookingResponse
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.POST

data class BookingRequest(val restaurant_id: Int, val seat_id: Int, val customer_id: Int)

interface BookingService {
    @POST("bookings/create")
    fun bookSeat(@Body request: BookingRequest): Call<BookingResponse>
}




-------------------------------------

ViewSeatRoutes.kt

package com.example.seatsight.data.api

import com.example.seatsight.data.model.ViewSeatResponse
import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.Path

interface ViewSeatService {
    @GET("api/restaurants/get-restaurant-id/{restaurant_id}")
    fun getRestaurantId(@Path("restaurant_id") restaurantId: Int): Call<ViewSeatResponse>
}




-------------------------------------

RestaurantService.kt

package com.example.seatsight.data.api


import com.example.seatsight.data.model.Restaurant
import retrofit2.Call
import retrofit2.http.GET
import retrofit2.http.Path

interface RestaurantService {
    @GET("restaurants/owner/{owner_id}")
    fun getRestaurant(@Path("owner_id") ownerId: Int): Call<Restaurant>


}




-------------------------------------

SeatTrackingService.kt

package com.example.seatsight.data.api


import com.example.seatsight.data.model.SeatStreamResponse
import okhttp3.ResponseBody
import retrofit2.http.GET
import retrofit2.http.Path
import retrofit2.http.Streaming

/**
 * Service interface for seat tracking API endpoints.
 * Provides methods to fetch real-time seat data.
 */
interface SeatTrackingService {
    /**
     * Get current seats for a restaurant.
     * Regular REST endpoint for standard API access.
     */
    @GET("api/seats/{restaurantId}")
    suspend fun getSeats(@Path("restaurantId") restaurantId: Int): SeatStreamResponse

    /**
     * Stream real-time seat updates for a restaurant using Server-Sent Events.
     * This is a streaming endpoint that keeps the connection open.
     */
    @Streaming
    @GET("api/seats/stream/{restaurantId}")
    suspend fun streamSeats(@Path("restaurantId") restaurantId: Int): ResponseBody
}




-------------------------------------

Seat.kt

package com.example.seatsight.data.model

import com.google.gson.annotations.SerializedName

data class Seat(
    @SerializedName("seatid") val seatId: Int,         // ✅ Matches API field "seatid"
    @SerializedName("seatnumber") val seatNumber: Int, // ✅ Matches API field "seatnumber"
    @SerializedName("is_booked") val isBooked: Boolean // ✅ Matches API field "is_booked"
)




-------------------------------------

AuthModels.kt

package com.example.seatsight.data.model

// ✅ Registration Request Model (No Role Needed)
data class RegisterRequest(
    val email: String,
    val password: String
)

// ✅ Login Request Model
data class LoginRequest(
    val email: String,
    val password: String
)

// ✅ Model for API Response When Registering a New User
data class RegisterResponse(
    val message: String,
    val user: UserData
)

// ✅ Model for API Response When Logging In
data class LoginResponse(
    val id: Int,
    val email: String,
    val token: String
)

// ✅ User Data Model
data class UserData(
    val id: Int,
    val email: String
)




-------------------------------------

HotelDetails.kt

package com.example.seatsight.data.model





data class HotelResponse(
    val restaurant_id: Int, // ✅ Matches API response
    val hotel_name: String,   // ✅ Matches API response
    val hotel_description: String,
    val menu: List<MenuItem>  // ✅ Stores menu items as a list of objects
)

data class MenuItem(
    val id: Int,
    val name: String,
    val price: Double
)




-------------------------------------


BookingModels.kt

package com.example.seatsight.data.model


data class BookingResponse(
    val message: String,
    val status: String
)




-------------------------------------

RestaurantModels.kt

package com.example.seatsight.data.model


data class Restaurant(
    val id: Int,
    val name: String,
    val seating_capacity: Int
)




-------------------------------------

ViewSeatResponse.kt

package com.example.seatsight.data.model

data class ViewSeatResponse(val message: String, val restaurant_id: Int)




-------------------------------------


RealtimeSeatStatus.kt

package com.example.seatsight.data.model

/**
 * Model for real-time seat status updates from the deep learning model.
 * This is separate from the main Seat model to avoid conflicts.
 */
data class RealtimeSeatStatus(
    val id: Int,
    val seatNumber: Int,
    val status: String, // "vacant" or "occupied"
    val isBooked: Boolean,
    val posX: Int,
    val posY: Int
) {
    /**
     * Check if the seat is currently occupied based on status
     */
    fun isOccupied(): Boolean {
        return status == "occupied" || isBooked
    }

    /**
     * Get the display status text
     */
    fun getStatusText(): String {
        return if (isOccupied()) "Occupied" else "Available"
    }

    /**
     * Get the appropriate status color
     */
    fun getStatusColor() = if (isOccupied()) android.graphics.Color.RED else android.graphics.Color.GREEN
}



-------------------------------------

SeatTrackingModels.kt

package com.example.seatsight.data.model

import com.google.gson.annotations.SerializedName

/**
 * Response model for seat streaming API's standard REST endpoint.
 * This is used for the non-streaming endpoint that returns a snapshot of seat data.
 */
data class SeatStreamResponse(
    @SerializedName("status")
    val status: String,

    @SerializedName("restaurantId")
    val restaurantId: Int,

    @SerializedName("seats")
    val seats: List<RealtimeSeatDto>,

    @SerializedName("timestamp")
    val timestamp: Long? = null
)

/**
 * Data Transfer Object for seat information from the API.
 * This is used to deserialize the JSON response.
 */
data class RealtimeSeatDto(
    @SerializedName("id")
    val id: Int,

    @SerializedName("seatNumber")
    val seatNumber: Int,

    @SerializedName("status")
    val status: String,

    @SerializedName("isBooked")
    val isBooked: Boolean,

    @SerializedName("posX")
    val posX: Int? = null,

    @SerializedName("posY")
    val posY: Int? = null
) {
    /**
     * Convert DTO to domain model
     */
    fun toRealtimeSeatStatus(): RealtimeSeatStatus {
        return RealtimeSeatStatus(
            id = id,
            seatNumber = seatNumber,
            status = status,
            isBooked = isBooked,
            posX = posX ?: 0,
            posY = posY ?: 0
        )
    }
}




-------------------------------------

RetrofitClient.kt

package com.example.seatsight.data.network


import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "http://192.168.1.11:3001/"  // ✅ Update with your actual API base URL
//private const val BASE_URL = "http://192.168.25.241:3001/"
    val instance: Retrofit by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())  // ✅ JSON converter
            .build()
    }
}




-------------------------------------

SseEventSource.kt

package com.example.seatsight.data.network

import android.util.Log
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.flow.catch
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import okhttp3.sse.EventSource
import okhttp3.sse.EventSourceListener
import okhttp3.sse.EventSources
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicBoolean

/**
 * Utility class for creating and managing Server-Sent Events connections.
 */
class SseEventSource {
    private val TAG = "SseEventSource"

    // Track the active event source
    private var activeEventSource: EventSource? = null
    private val isConnected = AtomicBoolean(false)

    // Configure OkHttp client for SSE with longer timeouts
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS) // Longer read timeout for SSE
        .retryOnConnectionFailure(true)
        .build()

    private val factory = EventSources.createFactory(client)

    /**
     * Connect to an SSE endpoint and return a Flow of event data.
     *
     * @param url The SSE endpoint URL
     * @return Flow of string data received from the server
     */
    fun connect(url: String): Flow<String> = callbackFlow {
        // First ensure any existing connection is closed properly
        closeConnection()

        // Fix double slashes in URL
        val sanitizedUrl = url.replace("//api", "/api")
        Log.d(TAG, "Connecting to SSE endpoint: $sanitizedUrl")

        val request = Request.Builder()
            .url(sanitizedUrl)
            .header("Accept", "text/event-stream")
            .header("Cache-Control", "no-cache")
            .build()

        val listener = object : EventSourceListener() {
            override fun onOpen(eventSource: EventSource, response: Response) {
                Log.d(TAG, "SSE connection opened successfully")
                isConnected.set(true)
            }

            override fun onEvent(eventSource: EventSource, id: String?, type: String?, data: String) {
                Log.d(TAG, "Received SSE event data")
                trySend(data)
            }

            override fun onFailure(eventSource: EventSource, t: Throwable?, response: Response?) {
                Log.e(TAG, "SSE connection failed", t)
                isConnected.set(false)
                // Don't close the flow right away - let the consumer decide
                // This prevents crashes when the connection fails
                trySend("ERROR: ${t?.message ?: "Unknown error"}")
            }

            override fun onClosed(eventSource: EventSource) {
                Log.d(TAG, "SSE connection closed by server")
                isConnected.set(false)
                close()
            }
        }

        try {
            val eventSource = factory.newEventSource(request, listener)
            activeEventSource = eventSource
        } catch (e: Exception) {
            Log.e(TAG, "Error creating event source", e)
            close(e)
        }

        awaitClose {
            Log.d(TAG, "Flow closing, cancelling SSE connection")
            closeConnection()
        }
    }.catch { exception ->
        // Provide an opportunity to handle exceptions without crashing
        Log.e(TAG, "Error in SSE flow", exception)
        throw exception  // Rethrow to allow caller to handle
    }

    /**
     * Closes any active connection.
     * Safe to call even if no connection exists.
     */
    fun closeConnection() {
        val eventSource = activeEventSource
        activeEventSource = null

        if (eventSource != null) {
            Log.d(TAG, "Explicitly closing previous SSE connection")
            try {
                eventSource.cancel()
                isConnected.set(false)
            } catch (e: Exception) {
                Log.e(TAG, "Error closing SSE connection", e)
            }
        }
    }

    /**
     * Check if a connection is currently active
     */
    fun isConnectionActive(): Boolean {
        return isConnected.get() && activeEventSource != null
    }
}




-------------------------------------

AuthRepository.kt

package com.example.seatsight.data.repository

import android.util.Log
import com.example.seatsight.data.api.AuthService
import com.example.seatsight.data.model.LoginRequest
import com.example.seatsight.data.model.LoginResponse
import com.example.seatsight.data.model.RegisterRequest
import com.example.seatsight.data.model.RegisterResponse
import com.example.seatsight.data.network.RetrofitClient
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.HttpException
import retrofit2.Response

class AuthRepository {
    private val authService = RetrofitClient.instance.create(AuthService::class.java)

    suspend fun login(email: String, password: String): Response<LoginResponse> {
        return authService.login(LoginRequest(email, password))
    }

    suspend fun register(email: String, password: String): Response<RegisterResponse> {
        return authService.register(RegisterRequest(email, password))
    }
}





-------------------------------------

HotelRepository.kt

package com.example.seatsight.data.repository

import com.example.seatsight.data.api.HotelService
import com.example.seatsight.data.model.HotelResponse
import com.example.seatsight.data.model.MenuItem
import com.example.seatsight.data.model.Seat
import com.example.seatsight.data.network.RetrofitClient
import retrofit2.Response

class HotelRepository {
    private val hotelService = RetrofitClient.instance.create(HotelService::class.java)

    suspend fun fetchHotels(): Response<List<HotelResponse>> {
        return hotelService.getHotels()
    }

    suspend fun fetchSeats(restaurantId: Int): Response<List<Seat>> { // ✅ Use correct API route
        return hotelService.getSeats(restaurantId)
    }

    suspend fun fetchMenu(restaurantId: Int): Response<List<MenuItem>> {
        return hotelService.getMenu(restaurantId)
    }

}




-------------------------------------

BookingRepository.kt

package com.example.seatsight.data.repository



import com.example.seatsight.data.api.BookingRequest
import com.example.seatsight.data.api.BookingService
import com.example.seatsight.data.model.BookingResponse
import com.example.seatsight.data.network.RetrofitClient
import retrofit2.Call

class BookingRepository {
    private val bookingService = RetrofitClient.instance.create(BookingService::class.java)

    fun bookSeat(restaurantId: Int, seatId: Int, customerId: Int): Call<BookingResponse> {
        return bookingService.bookSeat(BookingRequest(restaurantId, seatId, customerId))
    }
}




-------------------------------------

ViewSeatRepository.kt

package com.example.seatsight.data.repository

import com.example.seatsight.data.api.ViewSeatService
import com.example.seatsight.data.model.ViewSeatResponse
import com.example.seatsight.data.network.RetrofitClient
import retrofit2.Call

class ViewSeatRepository {
    private val viewSeatService = RetrofitClient.instance.create(ViewSeatService::class.java)

    fun getRestaurantId(restaurantId: Int): Call<ViewSeatResponse> {
        return viewSeatService.getRestaurantId(restaurantId)
    }
}




-------------------------------------

RestaurantRepository.kt

package com.example.seatsight.data.repository


import com.example.seatsight.data.api.RestaurantService
import com.example.seatsight.data.model.Restaurant
import com.example.seatsight.data.network.RetrofitClient
import retrofit2.Call

class RestaurantRepository {
    private val restaurantService = RetrofitClient.instance.create(RestaurantService::class.java)

    fun getRestaurant(ownerId: Int): Call<Restaurant> {
        return restaurantService.getRestaurant(ownerId)
    }
}




-------------------------------------

RealtimeSeatRepository.kt.kt

package com.example.seatsight.data.repository

import android.util.Log
import com.example.seatsight.data.model.RealtimeSeatStatus
import com.example.seatsight.data.network.SseEventSource
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import org.json.JSONObject

/**
 * Repository for accessing real-time seat tracking data from the deep model API.
 */
class RealtimeSeatRepository {
    private val TAG = "RealtimeSeatRepository"
    private val sseEventSource = SseEventSource()

    /**
     * Stream real-time seat updates for a restaurant.
     *
     * @param restaurantId The ID of the restaurant
     * @return Flow emitting seat lists that updates in real-time
     */
    fun streamSeats(restaurantId: Int): Flow<List<RealtimeSeatStatus>> {
        val url = "${BASE_URL}api/seats/stream/$restaurantId"

        return sseEventSource.connect(url)
            .map { eventData ->
                try {
                    // Parse the JSON data from the SSE event
                    val jsonObject = JSONObject(eventData)
                    val seatsArray = jsonObject.getJSONArray("seats")

                    val seats = mutableListOf<RealtimeSeatStatus>()
                    for (i in 0 until seatsArray.length()) {
                        val seatObject = seatsArray.getJSONObject(i)

                        // Extract all properties including status
                        val seatId = seatObject.getInt("id")
                        val seatNumber = seatObject.getInt("seatNumber")
                        val status = seatObject.getString("status")  // "vacant" or "occupied"
                        val isBooked = seatObject.optBoolean("isBooked", false)
                        val posX = seatObject.optInt("posX", 0)
                        val posY = seatObject.optInt("posY", 0)

                        // Create the RealtimeSeatStatus object
                        val seat = RealtimeSeatStatus(
                            id = seatId,
                            seatNumber = seatNumber,
                            status = status,
                            isBooked = isBooked,
                            posX = posX,
                            posY = posY
                        )

                        seats.add(seat)
                    }

                    seats
                } catch (e: Exception) {
                    Log.e(TAG, "Error parsing SSE event data", e)
                    emptyList()
                }
            }
            .flowOn(Dispatchers.IO)
    }

    companion object {
        // Update this with your actual deep model server URL
        // For emulator testing with localhost server, use 10.0.2.2 instead of localhost
        private const val BASE_URL = "http://192.168.1.11:3003"
    }
}




-------------------------------------

HotelInfo.kt

package com.example.seatsight.data

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//data for hotel name and hotel description is saved on this data class
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Prepare HotelDetails data class
data class HotelDetails(
    val name: String,
    val description: String,
    val menuItems: List<String>,
    val restaurantId: Int // ✅ Added `restaurantId`
)




-------------------------------------

AuthViewModel.kt

package com.example.seatsight.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.seatsight.data.repository.AuthRepository
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow

class AuthViewModel(private val authRepository: AuthRepository) : ViewModel() {

    private val _loginResult = MutableStateFlow<Result<String>?>(null)
    val loginResult: StateFlow<Result<String>?> = _loginResult

    private val _registerResult = MutableStateFlow<Result<String>?>(null)
    val registerResult: StateFlow<Result<String>?> = _registerResult

    fun login(email: String, password: String) {
        viewModelScope.launch {
            try {
                val response = authRepository.login(email, password)
                if (response.isSuccessful) {
                    _loginResult.value = Result.success("Login successful!")
                } else {
                    _loginResult.value = Result.failure(Exception("Invalid credentials"))
                }
            } catch (e: Exception) {
                _loginResult.value = Result.failure(e)
            }
        }
    }

    fun register(email: String, password: String) {
        viewModelScope.launch {
            try {
                val response = authRepository.register(email, password)
                if (response.isSuccessful) {
                    _registerResult.value = Result.success("Registration successful!")
                } else {
                    _registerResult.value = Result.failure(Exception("Registration failed"))
                }
            } catch (e: Exception) {
                _registerResult.value = Result.failure(e)
            }
        }
    }
}




-------------------------------------

HotelViewModel.kt

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.seatsight.data.model.HotelResponse
import com.example.seatsight.data.model.MenuItem
import com.example.seatsight.data.model.Seat
import com.example.seatsight.data.repository.HotelRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class HotelViewModel(private val repository: HotelRepository) : ViewModel() {
    private val _hotelList = MutableStateFlow<List<HotelResponse>>(emptyList())
    val hotelList: StateFlow<List<HotelResponse>> = _hotelList

    private val _seatList = MutableStateFlow<List<Seat>>(emptyList()) // ✅ Holds seat data
    val seatList: StateFlow<List<Seat>> = _seatList

    private val _menuList = MutableStateFlow<List<MenuItem>>(emptyList()) // ✅ Holds menu data
    val menuList: StateFlow<List<MenuItem>> = _menuList

    fun fetchHotels() {
        viewModelScope.launch {
            try {
                val response = repository.fetchHotels()
                if (response.isSuccessful) {
                    _hotelList.value = response.body() ?: emptyList()
                }
            } catch (e: Exception) {
                // Handle Error
            }
        }
    }


    fun fetchSeats(restaurantId: Int) {
        Log.d("FetchSeats", "Fetching seats for restaurantId: $restaurantId") // ✅ Log before API call
        viewModelScope.launch {
            try {
                val response = repository.fetchSeats(restaurantId)
                if (response.isSuccessful) {
                    val rawJson = response.body()?.toString() ?: "Empty Response"
                    Log.d("FetchSeats", "Raw API Response: $rawJson") // ✅ Log raw JSON response

                    val seats = response.body() ?: emptyList()
                    _seatList.value = seats
                    Log.d("FetchSeats", "Parsed Seats: $seats") // ✅ Log parsed seat list
                } else {
                    Log.e("FetchSeats", "API Error: ${response.errorBody()?.string()}")
                }
            } catch (e: Exception) {
                Log.e("FetchSeats", "Exception: ${e.message}")
            }
        }
    }

    fun fetchMenu(restaurantId: Int) { // ✅ New method for fetching menu
        viewModelScope.launch {
            try {
                val response = repository.fetchMenu(restaurantId)
                if (response.isSuccessful) {
                    _menuList.value = response.body() ?: emptyList()
                }
            } catch (e: Exception) {
                // Handle Error
            }
        }
    }

}






-------------------------------------

AuthViewModelFactory.kt

package com.example.seatsight.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.seatsight.data.repository.AuthRepository

class AuthViewModelFactory(private val authRepository: AuthRepository) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(AuthViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return AuthViewModel(authRepository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}




-------------------------------------

HotelViewModelFactory.kt

package com.example.seatsight.UI.viewmodel

import HotelViewModel
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.seatsight.data.repository.HotelRepository

class HotelViewModelFactory(private val repository: HotelRepository) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(HotelViewModel::class.java)) {
            return HotelViewModel(repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}




-------------------------------------

RealtimeSeatViewModel.kt

package com.example.seatsight.ui.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.seatsight.data.model.RealtimeSeatStatus
import com.example.seatsight.data.repository.RealtimeSeatRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel for real-time seat status updates.
 * This is separate from the existing ViewModels to avoid conflicts.
 */
class RealtimeSeatViewModel : ViewModel() {
    private val TAG = "RealtimeSeatViewModel"
    private val repository = RealtimeSeatRepository()

    // StateFlow to expose seat updates to the UI
    private val _seatStatusList = MutableStateFlow<List<RealtimeSeatStatus>>(emptyList())
    val seatStatusList: StateFlow<List<RealtimeSeatStatus>> = _seatStatusList.asStateFlow()

    // Track currently streaming restaurant to avoid duplicate streams
    private var currentRestaurantId: Int? = null

    /**
     * Start streaming real-time seat updates for a specific restaurant.
     *
     * @param restaurantId The ID of the restaurant to stream updates for
     */
    fun startRealtimeUpdates(restaurantId: Int) {
        // Don't restart if already streaming for this restaurant
        if (currentRestaurantId == restaurantId) {
            return
        }

        currentRestaurantId = restaurantId
        Log.d(TAG, "Starting real-time seat updates for restaurant: $restaurantId")

        viewModelScope.launch {
            repository.streamSeats(restaurantId).collect { updatedSeats ->
                if (updatedSeats.isNotEmpty()) {
                    _seatStatusList.value = updatedSeats
                    Log.d(TAG, "Updated seats: ${updatedSeats.size}")
                }
            }
        }
    }

    /**
     * Stop streaming updates.
     */
    fun stopRealtimeUpdates() {
        currentRestaurantId = null
    }
}

/**
 * Factory for creating RealtimeSeatViewModel instances.
 */
class RealtimeSeatViewModelFactory : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(RealtimeSeatViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return RealtimeSeatViewModel() as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}




-------------------------------------

login.kt

package com.example.seatsight.UI.authentication

import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.AuthScreen
import com.example.seatsight.Home
import com.example.seatsight.data.repository.AuthRepository
import com.example.seatsight.ui.viewmodel.AuthViewModel
import com.example.seatsight.ui.viewmodel.AuthViewModelFactory
import kotlinx.coroutines.launch
import java.util.Calendar

//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun LoginScreen(navController: NavController) {
//    val currentYear = Calendar.getInstance().get(Calendar.YEAR)
//
//    var email by remember { mutableStateOf("") }
//    var password by remember { mutableStateOf("") }
//    var showErrorDialog by remember { mutableStateOf(false) }
//    var errorMessage by remember { mutableStateOf("") }
//
//    val focusColor = Color(android.graphics.Color.parseColor("#302F2F")) // Same as login button color
//
//    fun validateAndLogin() {
//        navController.navigate(Home.route)
////        when {
////            email.isBlank() -> {
////                errorMessage = "Please enter your email."
////                showErrorDialog = true
////            }
////            password.isBlank() -> {
////                errorMessage = "Please enter your password."
////                showErrorDialog = true
////            }
////            email != "a@a" || password != "a" -> {
////                errorMessage = "Invalid email or password. Please try again."
////                showErrorDialog = true
////            }
////            else -> {
////                navController.navigate(Home.route) {
////                    popUpTo(AuthScreen.route) { inclusive = true }
////                }
////            }
////        }
//    }
//
//    Surface(modifier = Modifier.fillMaxSize()) {
//        Box(
//            modifier = Modifier.fillMaxSize(),
//            contentAlignment = Alignment.Center
//        ) {
//            Column(
//                horizontalAlignment = Alignment.CenterHorizontally
//            ) {
//                Text(
//                    text = "SeatSight",
//                    fontSize = 30.sp
//                )
//
//                Spacer(modifier = Modifier.height(8.dp))
//
//                Text(
//                    text = "Login to your account",
//                    fontSize = 18.sp
//                )
//
//                Spacer(modifier = Modifier.height(24.dp))
//
//                // Email Input Field
//                OutlinedTextField(
//                    value = email,
//                    onValueChange = { email = it },
//                    label = { Text("Email") },
//                    shape = RoundedCornerShape(20.dp),
//                    modifier = Modifier
//                        .fillMaxWidth(0.8f)
//                        .padding(8.dp),
//                    colors = OutlinedTextFieldDefaults.colors(
//                        focusedBorderColor = focusColor, // Border color when focused
//                        cursorColor = focusColor
//                    ),
//                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
//                )
//
//                // Password Input Field
//                OutlinedTextField(
//                    value = password,
//                    onValueChange = { password = it },
//                    label = { Text("Password") },
//                    visualTransformation = PasswordVisualTransformation(),
//                    shape = RoundedCornerShape(20.dp),
//                    modifier = Modifier
//                        .fillMaxWidth(0.8f)
//                        .padding(8.dp),
//                    colors = OutlinedTextFieldDefaults.colors(
//                        focusedBorderColor = focusColor, // Border color when focused
//                        cursorColor = focusColor
//                    ),
//                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password)
//                )
//
//                Spacer(modifier = Modifier.height(16.dp))
//
//                // Login Button
//                Button(
//                    onClick = { validateAndLogin() },
//                    modifier = Modifier.padding(),
//                    colors = ButtonDefaults.buttonColors(
//                        containerColor = focusColor
//                    )
//                ) {
//                    Text(
//                        text = "Login",
//                        color = Color(android.graphics.Color.parseColor("#F7F7F7"))
//                    )
//                }
//            }
//
//            // Error Dialog
//            if (showErrorDialog) {
//                AlertDialog(
//                    onDismissRequest = { showErrorDialog = false },
//                    confirmButton = {
//                        Button(
//                            onClick = { showErrorDialog = false },
//                            colors = ButtonDefaults.buttonColors(
//                                containerColor = focusColor, // **Matches login button**
//                                contentColor = Color.White
//                            )
//                        ) {
//                            Text("OK", fontSize = 16.sp)
//                        }
//                    },
//                    title = {
//                        Text(
//                            text = "Login Error",
//                            fontSize = 20.sp,
//                            fontWeight = FontWeight.Bold,
//                            color = MaterialTheme.colorScheme.onSurface
//                        )
//                    },
//                    text = {
//                        Text(
//                            text = errorMessage,
//                            fontSize = 16.sp,
//                            color = MaterialTheme.colorScheme.onSurfaceVariant
//                        )
//                    },
//                    containerColor = MaterialTheme.colorScheme.surface, // Uses existing theme
//                    shape = RoundedCornerShape(12.dp) // Modern UI
//                )
//            }
//
//            // Footer at the bottom center
//            Text(
//                text = "SeatSight $currentYear",
//                fontSize = 14.sp,
//                color = Color.Gray,
//                modifier = Modifier
//                    .align(Alignment.BottomCenter)
//                    .padding(bottom = 16.dp)
//            )
//        }
//    }
//}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginScreen(navController: NavController) {
    val authRepository = remember { AuthRepository() } // ✅ Create Repository
    val authViewModel: AuthViewModel = viewModel(factory = AuthViewModelFactory(authRepository)) // ✅ ViewModel Factory

    val currentYear = Calendar.getInstance().get(Calendar.YEAR)

    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var showErrorDialog by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }

    val loginResult by authViewModel.loginResult.collectAsState()

    val focusColor = Color(android.graphics.Color.parseColor("#302F2F")) // Button color

    fun validateAndLogin() {
        if (email.isBlank() || password.isBlank()) {
            errorMessage = "Please enter valid credentials."
            showErrorDialog = true
        } else {
            isLoading = true
            authViewModel.login(email, password)
        }
    }

    LaunchedEffect(loginResult) {
        loginResult?.let {
            isLoading = false
            if (it.isSuccess) {
                Log.d("API_TEST", "Login Successful")
                navController.navigate(Home.route) {
                    popUpTo("LoginScreen") { inclusive = true }
                }
            } else {
                errorMessage = "Login failed: ${it.exceptionOrNull()?.message}"
                showErrorDialog = true
            }
        }
    }

    Surface(modifier = Modifier.fillMaxSize()) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "SeatSight",
                    fontSize = 30.sp
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = "Login to your account",
                    fontSize = 18.sp
                )

                Spacer(modifier = Modifier.height(24.dp))

                // Email Input Field
                OutlinedTextField(
                    value = email,
                    onValueChange = { email = it },
                    label = { Text("Email") },
                    shape = RoundedCornerShape(20.dp),
                    modifier = Modifier
                        .fillMaxWidth(0.8f)
                        .padding(8.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = focusColor,
                        cursorColor = focusColor
                    ),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
                )

                // Password Input Field
                OutlinedTextField(
                    value = password,
                    onValueChange = { password = it },
                    label = { Text("Password") },
                    visualTransformation = PasswordVisualTransformation(),
                    shape = RoundedCornerShape(20.dp),
                    modifier = Modifier
                        .fillMaxWidth(0.8f)
                        .padding(8.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = focusColor,
                        cursorColor = focusColor
                    ),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password)
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Login Button
                Button(
                    onClick = { validateAndLogin() },
                    modifier = Modifier.padding(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = focusColor
                    ),
                    enabled = !isLoading
                ) {
                    Text(
                        text = if (isLoading) "Logging in..." else "Login",
                        color = Color(android.graphics.Color.parseColor("#F7F7F7"))
                    )
                }
            }

            // Error Dialog
            if (showErrorDialog) {
                AlertDialog(
                    onDismissRequest = { showErrorDialog = false },
                    confirmButton = {
                        Button(
                            onClick = { showErrorDialog = false },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = focusColor,
                                contentColor = Color.White
                            )
                        ) {
                            Text("OK", fontSize = 16.sp)
                        }
                    },
                    title = {
                        Text(
                            text = "Login Error",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSurface
                        )
                    },
                    text = {
                        Text(
                            text = errorMessage,
                            fontSize = 16.sp,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    },
                    containerColor = MaterialTheme.colorScheme.surface,
                    shape = RoundedCornerShape(12.dp)
                )
            }

            // Footer at the bottom center
            Text(
                text = "SeatSight $currentYear",
                fontSize = 14.sp,
                color = Color.Gray,
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(bottom = 16.dp)
            )
        }
    }
}



@Preview
@Composable
fun LoginScreenPrev() {
    val navController = rememberNavController()
    LoginScreen(navController = navController)
}




-------------------------------------

register.kt

//package com.example.seatsight.UI.authentication
//
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.shape.RoundedCornerShape
//import androidx.compose.foundation.text.KeyboardOptions
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.text.font.FontWeight
//import androidx.compose.ui.text.input.PasswordVisualTransformation
//import androidx.compose.ui.text.input.KeyboardType
//import androidx.compose.ui.tooling.preview.Preview
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import androidx.navigation.NavController
//import androidx.navigation.compose.rememberNavController
//import com.example.seatsight.Home
//import java.util.Calendar
//
//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun RegisterScreen(navController: NavController) {
//    val currentYear = Calendar.getInstance().get(Calendar.YEAR)
//
//    var email by remember { mutableStateOf("") }
//    var password by remember { mutableStateOf("") }
//    var showErrorDialog by remember { mutableStateOf(false) }
//    var errorMessage by remember { mutableStateOf("") }
//
//    val focusColor = Color(android.graphics.Color.parseColor("#302F2F")) // Button color
//
//    fun validateAndRegister() {
//        when {
//            email.isBlank() -> {
//                errorMessage = "Please enter your email."
//                showErrorDialog = true
//            }
//            password.isBlank() -> {
//                errorMessage = "Please enter your password."
//                showErrorDialog = true
//            }
//            else -> {
//                // Navigate to Welcome Screen after successful registration
//                navController.navigate(Home.route)
//            }
//        }
//    }
//
//    Surface(modifier = Modifier.fillMaxSize()) {
//        Box(
//            modifier = Modifier.fillMaxSize(),
//            contentAlignment = Alignment.Center
//        ) {
//            Column(
//                horizontalAlignment = Alignment.CenterHorizontally
//            ) {
//                Text(
//                    text = "SeatSight",
//                    fontSize = 30.sp
//                )
//
//                Spacer(modifier = Modifier.height(8.dp))
//
//                Text(
//                    text = "Create your account",
//                    fontSize = 18.sp
//                )
//
//                Spacer(modifier = Modifier.height(24.dp))
//
//                // Email Text Field
//                OutlinedTextField(
//                    value = email,
//                    onValueChange = { email = it },
//                    label = { Text("Email") },
//                    shape = RoundedCornerShape(20.dp),
//                    modifier = Modifier
//                        .fillMaxWidth(0.8f)
//                        .padding(8.dp),
//                    colors = OutlinedTextFieldDefaults.colors(
//                        focusedBorderColor = focusColor, // Border color when focused
//                        cursorColor = focusColor
//                    ),
//                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
//                )
//
//                // Password Text Field
//                OutlinedTextField(
//                    value = password,
//                    onValueChange = { password = it },
//                    label = { Text("Password") },
//                    visualTransformation = PasswordVisualTransformation(),
//                    shape = RoundedCornerShape(20.dp),
//                    modifier = Modifier
//                        .fillMaxWidth(0.8f)
//                        .padding(8.dp),
//                    colors = OutlinedTextFieldDefaults.colors(
//                        focusedBorderColor = focusColor, // Border color when focused
//                        cursorColor = focusColor
//                    ),
//                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password)
//                )
//
//                Spacer(modifier = Modifier.height(16.dp))
//
//                Button(
//                    onClick = { validateAndRegister() },
//                    modifier = Modifier.padding(),
//                    colors = ButtonDefaults.buttonColors(
//                        containerColor = focusColor
//                    )
//                ) {
//                    Text(
//                        text = "Register",
//                        color = Color(android.graphics.Color.parseColor("#F7F7F7"))
//                    )
//                }
//            }
//
//            // Error Dialog
//            if (showErrorDialog) {
//                AlertDialog(
//                    onDismissRequest = { showErrorDialog = false },
//                    confirmButton = {
//                        Button(
//                            onClick = { showErrorDialog = false },
//                            colors = ButtonDefaults.buttonColors(
//                                containerColor = focusColor, // Same as register button
//                                contentColor = Color.White
//                            )
//                        ) {
//                            Text("OK", fontSize = 16.sp)
//                        }
//                    },
//                    title = {
//                        Text(
//                            text = "Registration Error",
//                            fontSize = 20.sp,
//                            fontWeight = FontWeight.Bold,
//                            color = MaterialTheme.colorScheme.onSurface
//                        )
//                    },
//                    text = {
//                        Text(
//                            text = errorMessage,
//                            fontSize = 16.sp,
//                            color = MaterialTheme.colorScheme.onSurfaceVariant
//                        )
//                    },
//                    containerColor = MaterialTheme.colorScheme.surface, // Uses existing theme
//                    shape = RoundedCornerShape(12.dp) // Modern UI
//                )
//            }
//
//            // Footer at the bottom center
//            Text(
//                text = "SeatSight $currentYear",
//                fontSize = 14.sp,
//                color = Color.Gray,
//                modifier = Modifier
//                    .align(Alignment.BottomCenter)
//                    .padding(bottom = 16.dp)
//            )
//        }
//    }
//}

package com.example.seatsight.UI.authentication

import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewModelScope
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.Home
import com.example.seatsight.data.repository.AuthRepository
import kotlinx.coroutines.launch
import java.util.Calendar


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(navController: NavController) {
    val currentYear = Calendar.getInstance().get(Calendar.YEAR)
    val authRepository = AuthRepository()

    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var showErrorDialog by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }

    val focusColor = Color(android.graphics.Color.parseColor("#302F2F"))

    // ✅ Fix: Use CoroutineScope (Not LaunchedEffect Here)
    val coroutineScope = rememberCoroutineScope()

    fun validateAndRegister() {
        when {
            email.isBlank() -> {
                errorMessage = "Please enter your email."
                showErrorDialog = true
            }
            password.isBlank() -> {
                errorMessage = "Please enter your password."
                showErrorDialog = true
            }
            else -> {
                isLoading = true
                coroutineScope.launch {
                    try {
                        val response = authRepository.register(email, password)
                        if (response.isSuccessful && response.body() != null) {
                            Log.d("API_TEST", "Registration Successful: ${response.body()?.message}")
                            navController.navigate(Home.route)
                        } else {
                            errorMessage = "Registration failed: ${response.errorBody()?.string() ?: "Unknown error"}"
                            showErrorDialog = true
                        }
                    } catch (e: Exception) {
                        errorMessage = "API Error: ${e.message}"
                        showErrorDialog = true
                        Log.e("API_TEST", "Registration Failed", e)
                    }
                    isLoading = false
                }
            }
        }
    }


    // 🎨 UI Layout (No Change)
    Surface(modifier = Modifier.fillMaxSize()) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(text = "SeatSight", fontSize = 30.sp)
                Spacer(modifier = Modifier.height(8.dp))
                Text(text = "Create your account", fontSize = 18.sp)
                Spacer(modifier = Modifier.height(24.dp))

                // Email Field
                OutlinedTextField(
                    value = email,
                    onValueChange = { email = it },
                    label = { Text("Email") },
                    shape = RoundedCornerShape(20.dp),
                    modifier = Modifier.fillMaxWidth(0.8f).padding(8.dp),
                    colors = OutlinedTextFieldDefaults.colors(focusedBorderColor = focusColor, cursorColor = focusColor),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
                )

                // Password Field
                OutlinedTextField(
                    value = password,
                    onValueChange = { password = it },
                    label = { Text("Password") },
                    visualTransformation = PasswordVisualTransformation(),
                    shape = RoundedCornerShape(20.dp),
                    modifier = Modifier.fillMaxWidth(0.8f).padding(8.dp),
                    colors = OutlinedTextFieldDefaults.colors(focusedBorderColor = focusColor, cursorColor = focusColor),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password)
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Register Button
                Button(
                    onClick = { validateAndRegister() },
                    modifier = Modifier.padding(),
                    colors = ButtonDefaults.buttonColors(containerColor = focusColor),
                    enabled = !isLoading
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(color = Color.White)
                    } else {
                        Text(text = "Register", color = Color.White)
                    }
                }
            }

            // Error Dialog
            if (showErrorDialog) {
                AlertDialog(
                    onDismissRequest = { showErrorDialog = false },
                    confirmButton = {
                        Button(
                            onClick = { showErrorDialog = false },
                            colors = ButtonDefaults.buttonColors(containerColor = focusColor, contentColor = Color.White)
                        ) {
                            Text("OK", fontSize = 16.sp)
                        }
                    },
                    title = { Text(text = "Registration Error", fontSize = 20.sp, fontWeight = FontWeight.Bold) },
                    text = { Text(text = errorMessage, fontSize = 16.sp) },
                    containerColor = MaterialTheme.colorScheme.surface,
                    shape = RoundedCornerShape(12.dp)
                )
            }

            // Footer at Bottom
            Text(
                text = "SeatSight $currentYear",
                fontSize = 14.sp,
                color = Color.Gray,
                modifier = Modifier.align(Alignment.BottomCenter).padding(bottom = 16.dp)
            )
        }
    }
}

@Preview
@Composable
fun RegisterScreenPrev() {
    val navController = rememberNavController()
    RegisterScreen(navController = navController)
}



//@Preview
//@Composable
//fun RegisterScreenPrev() {
//    val navController = rememberNavController()
//    RegisterScreen(navController = navController)
//}




-------------------------------------


authentication-home.kt

package com.example.seatsight.UI.authentication


import android.annotation.SuppressLint
import android.app.Activity
import android.content.pm.ActivityInfo
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column

import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.homescreen
import java.util.Calendar

//
//@Composable
//fun AuthHome(
//    navController: NavController
//) {
//    val currentYear = Calendar.getInstance().get(Calendar.YEAR)
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//    ) {
//        Box(
//            modifier = Modifier.fillMaxSize(),
//            contentAlignment = Alignment.Center // Center content inside Box
//        ) {
//            Column(
//                horizontalAlignment = Alignment.CenterHorizontally
//            ) {
//                Text(
//                    text = "SeatSight",
//                    fontSize = 30.sp,
//                    fontWeight = FontWeight.Bold
//                )
//
//                Spacer(modifier = Modifier.height(8.dp))
//
//                Text(
//                    text = "Welcome! Please sign in or create an account.",
//                    fontSize = 18.sp
//                )
//
//                Spacer(modifier = Modifier.height(24.dp))
//
//                Button(
//                    onClick = {navController.navigate("RegisterScreen")},
//                    modifier = Modifier.padding(),
//                    colors = ButtonDefaults.buttonColors(
//                        containerColor = Color(android.graphics.Color.parseColor("#302F2F"))
//                    )
//                ) {
//                    Text(
//                        text = "Register",
//                        color = Color(android.graphics.Color.parseColor("#F7F7F7"))
//                    )
//                }
//
//                Spacer(modifier = Modifier.height(12.dp))
//
//                Button(
//                    onClick = { navController.navigate("LoginScreen") },
//                    modifier = Modifier.padding(),
//                    colors = ButtonDefaults.buttonColors(
//                        containerColor = Color(android.graphics.Color.parseColor("#302F2F"))
//                    )
//                ) {
//                    Text(
//                        text = "Login",
//                        color = Color(android.graphics.Color.parseColor("#F7F7F7"))
//                    )
//                }
//            }
//
//            // Footer at the bottom center
//            Text(
//                text = "SeatSight $currentYear",
//                fontSize = 14.sp,
//                color = Color.Gray,
//                modifier = Modifier
//                    .align(Alignment.BottomCenter) // Align text to bottom
//                    .padding(bottom = 16.dp)
//            )
//        }
//    }
//}

@SuppressLint("SourceLockedOrientationActivity")
@Composable
fun AuthHome(navController: NavController) {
    val currentYear = Calendar.getInstance().get(Calendar.YEAR)
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current

    // ✅ Restrict to Portrait Mode
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_RESUME) {
                context as Activity
                context.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }

    Surface(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(20.dp),
            verticalArrangement = Arrangement.Center, // ✅ Center everything vertically
            horizontalAlignment = Alignment.CenterHorizontally // ✅ Center horizontally
        ) {
            Text(
                text = "SeatSight",
                fontSize = 30.sp,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Welcome! Please sign in or create an account.",
                fontSize = 18.sp,
                textAlign = androidx.compose.ui.text.style.TextAlign.Center // ✅ Ensure center alignment
            )

            Spacer(modifier = Modifier.height(24.dp))

            Button(
                onClick = { navController.navigate("RegisterScreen") },
                modifier = Modifier.fillMaxWidth(0.7f),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(android.graphics.Color.parseColor("#302F2F"))
                )
            ) {
                Text(text = "Register", color = Color.White)
            }

            Spacer(modifier = Modifier.height(12.dp))

            Button(
                onClick = { navController.navigate("LoginScreen") },
                modifier = Modifier.fillMaxWidth(0.7f),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(android.graphics.Color.parseColor("#302F2F"))
                )
            ) {
                Text(text = "Login", color = Color.White)
            }
        }

        // ✅ Footer centered at the bottom
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 16.dp),
            contentAlignment = Alignment.BottomCenter
        ) {
            Text(text = "SeatSight $currentYear", fontSize = 14.sp, color = Color.Gray)
        }
    }
}


@Preview
@Composable
fun AuthHomePrev(){
    val navController = rememberNavController()
    AuthHome(navController = navController)
}



-------------------------------------


BookSeatFinal.kt

import android.app.TimePickerDialog
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.BlendMode.Companion.Color
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.seatsight.UI.buttonColorBook
import com.example.seatsight.UI.surfaceColor
import com.example.seatsight.bookingConfirmation
import com.example.seatsight.data.model.MenuItem
import java.util.Calendar
@Composable
fun BookingConfirmationScreen(
    hotelName: String,
    selectedSeats: Set<String>,
    selectedMenu: Map<String, Int>,
    modifier: Modifier = Modifier,
    onConfirm: () -> Unit = {}
) {
    val background = Color(android.graphics.Color.parseColor("#D9D9D9"))
    val containerColor = surfaceColor
    val showAlert = remember { mutableStateOf(false) }
    val showTimeAlert = remember { mutableStateOf(false) }
    val timeAlertMessage = remember { mutableStateOf("") } // ⚠️ Dynamic alert message

    // ✅ Remember state for time selection
    val startTime = remember { mutableStateOf("") }
    val endTime = remember { mutableStateOf("") }

    Surface(
        modifier = Modifier
            .fillMaxSize()
            .background(background),
        color = background
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "Confirm Your Booking",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 20.dp, bottom = 20.dp),
                textAlign = TextAlign.Center
            )

            // **Booking Details Container**
            Surface(
                modifier = Modifier
                    .fillMaxWidth()
                    .wrapContentSize()
                    .clip(RoundedCornerShape(16.dp))
                    .background(containerColor),
                color = containerColor
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    // **Hotel Name**
                    Text(
                        text = "Hotel: $hotelName",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )

                    // **Selected Seats**
                    BookingInfoSection(title = "Selected Seats") {
                        if (selectedSeats.isEmpty()) {
                            Text("No seats selected", fontSize = 16.sp, color = androidx.compose.ui.graphics.Color.Gray)
                        } else {
                            Text(selectedSeats.joinToString(", "), fontSize = 16.sp)
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    // **Ordered Items**
                    BookingInfoSection(title = "Selected Items") {
                        val filteredMenu = selectedMenu.filterValues { it > 0 }
                        if (filteredMenu.isEmpty()) {
                            Text("Nothing is selected to order", fontSize = 16.sp, color = androidx.compose.ui.graphics.Color.Gray)
                        } else {
                            Column {
                                filteredMenu.forEach { (menuItem, quantity) ->
                                    Text("$menuItem x$quantity", fontSize = 16.sp)
                                }
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    // **Booking Time Selection**
                    BookingInfoSection(title = "Reserved Time") {
                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                            TimePickerButton(label = startTime.value.ifEmpty { "Select Start Time" }) {
                                startTime.value = it
                            }
                            Spacer(modifier = Modifier.height(12.dp))
                            TimePickerButton(label = endTime.value.ifEmpty { "Select End Time" }) {
                                endTime.value = it
                            }
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // **Confirm Booking Button with Smart Time Validation**
            Button(
                onClick = {
                    when {
                        startTime.value.isEmpty() && endTime.value.isEmpty() -> {
                            timeAlertMessage.value = "Please select both Start and End Time."
                            showTimeAlert.value = true
                        }
                        startTime.value.isEmpty() -> {
                            timeAlertMessage.value = "Please select Start Time."
                            showTimeAlert.value = true
                        }
                        endTime.value.isEmpty() -> {
                            timeAlertMessage.value = "Please select End Time."
                            showTimeAlert.value = true
                        }
                        else -> showAlert.value = true
                    }
                },
                colors = ButtonDefaults.buttonColors(buttonColorBook),
                modifier = Modifier
                    .height(40.dp)
                    .width(160.dp)
            ) {
                Text(text = "Confirm", fontSize = 16.sp)
            }

            // **Smart Time Selection Alert**
            if (showTimeAlert.value) {
                AlertDialogComponent(
                    message = timeAlertMessage.value, // ⚠️ Displays specific message
                    onDismiss = { showTimeAlert.value = false },
                    onConfirm = { showTimeAlert.value = false }
                )
            }

            // **Booking Confirmation Alert**
            if (showAlert.value) {
                AlertDialogComponent(
                    message = "Your booking is confirmed! The total amount will be added to your bill.",
                    onDismiss = { showAlert.value = false },
                    onConfirm = {
                        showAlert.value = false
                        onConfirm()
                    }
                )
            }
        }
    }
}



@Composable
fun BookingInfoSection(title: String, content: @Composable () -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 12.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = title,
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        content()
    }
}


@Composable
fun TimePickerButton(label: String, onTimeSelected: (String) -> Unit) {
    val context = LocalContext.current
    val timePicker = remember { mutableStateOf(label) }

    Button(
        onClick = {
            val cal = Calendar.getInstance()
            TimePickerDialog(
                context,
                { _, hour, minute ->
                    val formattedTime = String.format("%02d:%02d", hour, minute)
                    timePicker.value = formattedTime
                    onTimeSelected(formattedTime)
                },
                cal.get(Calendar.HOUR_OF_DAY),
                cal.get(Calendar.MINUTE),
                true
            ).show()
        },
        colors = ButtonDefaults.buttonColors(containerColor = androidx.compose.ui.graphics.Color.White),
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 24.dp)
    ) {
        Text(text = timePicker.value, color = androidx.compose.ui.graphics.Color.Black, fontSize = 16.sp)
    }
}




// **Reusable Alert Dialog Component**
@Composable
fun AlertDialogComponent(message: String, onDismiss: () -> Unit, onConfirm: () -> Unit) {
    AlertDialog(
        onDismissRequest = { onDismiss() },
        confirmButton = {
            Button(onClick = { onConfirm() }) {
                Text("OK")
            }
        },
        title = { Text(text = "Booking Confirmed") },
        text = { Text(text = message) }
    )
}

// **Preview Composable**
@Preview(showBackground = true)
@Composable
fun PreviewBookingConfirmationScreen() {
    BookingConfirmationScreen(
        hotelName = "Hotel Example",
        selectedSeats = setOf("S1", "S2"),
        selectedMenu = mapOf()
    )
}



-------------------------------------

HomeScreen.kt

package com.example.seatsight.UI

import HotelViewModel
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
import com.example.seatsight.data.repository.HotelRepository


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//HomeScreen Design.
//here we pass the listMenu composable's required list of hoteldetails from the data class hotelDetails
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
val surfaceColor = Color(android.graphics.Color.parseColor("#E4E4E4"))
//@Composable
// fun homescreen(modifier: Modifier = Modifier,
//             navController: NavController ) {
//
//    val seatAndViewButtonColor = Color(android.graphics.Color.parseColor("#D9D9D9"))
//
//    val buttonTextColor = Color(android.graphics.Color.parseColor("#222222"))
//
//
//
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//
//        color = surfaceColor
//
//
//    ) {
//
//
//        Column {
//// book seat button and view seats button
//            Surface(
//                modifier = Modifier
//                    .padding(vertical = 1.dp, horizontal = 10.dp),
//                color = surfaceColor
//
//
//
//            ) {
//                Row(
//                    modifier = Modifier
//                        .fillMaxWidth()
//                        .padding(vertical = 20.dp, horizontal = 0.dp)
//
//
//                ) {
//                    Button(
//                        onClick = {navController.navigate("availableHotelsForBookSeats")},
//                        modifier = Modifier
//                            .weight(1f)
//                            .padding(5.dp)
//                            .height(80.dp),
//                        shape = RoundedCornerShape(10.dp),
//                        colors = ButtonDefaults.buttonColors(seatAndViewButtonColor)
//
//                    ) {
//                        Text(
//                            text = "Book seats",
//                            color = buttonTextColor,
//                            fontSize = 20.sp
//                        )
//
//                    }
//
//                    Button(
//                        onClick = { navController.navigate("viewSeatAvailableSeatList") },
//                        modifier = Modifier
//                            .weight(1f)
//                            .padding(5.dp)
//                            .height(80.dp),
//                        shape = RoundedCornerShape(10.dp),
//                        colors = ButtonDefaults.buttonColors(seatAndViewButtonColor)
//                    ) {
//                        Text(text = "View seats",
//                            color = buttonTextColor,
//                            fontSize = 20.sp
//                        )
//                    }
//                }
//            }
//
//
//// available hotels options
//            Surface(
//                modifier = Modifier
//                    .padding(vertical = 0.dp, horizontal = 10.dp)
//                    .padding(bottom = 24.dp),
//                shape = RoundedCornerShape(5.dp),
//                color = surfaceColor
//
//            ) {
//                Column(
//                    modifier = Modifier
//                        .fillMaxWidth()
//                        .padding(vertical = 16.dp)
//
//
//                ) {
//                    Box(
//                        modifier = Modifier
//                            .padding(bottom = 0.dp)
//                            .fillMaxWidth(),
//
//
//                        ) {
//                        Column(
//                        ) {
//                            Text(
//                                text = "Available hotels",
//                                fontSize = 32.sp,
//                                fontWeight = FontWeight.SemiBold,
//                                modifier = Modifier
//                                    .padding(bottom = 18.dp)
//                                    .padding(start = 10.dp)
//                            )
//
//                            displayListMenuForHome(hotelDetail = hotels)
//
//                        }
//
//                    }
//                }
//            }
//        }
//
//    }
//
//}
@Composable
fun homescreen(
    modifier: Modifier = Modifier,
    navController: NavController
) {
    val seatAndViewButtonColor = Color(android.graphics.Color.parseColor("#D9D9D9"))
    val buttonTextColor = Color(android.graphics.Color.parseColor("#222222"))

    val repository = remember { HotelRepository() } // ✅ Create repository instance
    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository)) // ✅ Use ViewModel Factory

    val hotels by viewModel.hotelList.collectAsState()

    LaunchedEffect(true) {
        viewModel.fetchHotels() // ✅ Fetch data once
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = surfaceColor
    ) {
        Column {
            // ✅ Book Seat & View Seats Buttons (Re-added)
            Surface(
                modifier = Modifier.padding(vertical = 1.dp, horizontal = 10.dp),
                color = surfaceColor
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth().padding(vertical = 20.dp, horizontal = 0.dp)
                ) {
                    Button(
                        onClick = { navController.navigate("availableHotelsForBookSeats") },
                        modifier = Modifier.weight(1f).padding(5.dp).height(80.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(seatAndViewButtonColor)
                    ) {
                        Text(text = "Book seats", color = buttonTextColor, fontSize = 20.sp)
                    }

                    Button(
                        onClick = { navController.navigate("viewSeatAvailableHotelList") },
                        modifier = Modifier.weight(1f).padding(5.dp).height(80.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(seatAndViewButtonColor)
                    ) {
                        Text(text = "View seats", color = buttonTextColor, fontSize = 20.sp)
                    }
                }
            }

            // ✅ Available Hotels Section
            Surface(
                modifier = Modifier.padding(vertical = 0.dp, horizontal = 10.dp).padding(bottom = 24.dp),
                shape = RoundedCornerShape(5.dp),
                color = surfaceColor
            ) {
                Column(modifier = Modifier.fillMaxWidth().padding(vertical = 16.dp)) {
                    Text(
                        text = "Available hotels",
                        fontSize = 32.sp,
                        fontWeight = FontWeight.SemiBold,
                        modifier = Modifier.padding(bottom = 18.dp).padding(start = 10.dp)
                    )

                    if (hotels.isNotEmpty()) {
                        displayListMenuForHome(hotelDetail = hotels) // ✅ Display hotels
                    } else {
                        Text(
                            text = "Loading hotels...",
                            modifier = Modifier.padding(16.dp),
                            fontSize = 18.sp
                        )
                    }
                }
            }
        }
    }
}


@Preview
@Composable
fun home(){
    val navController = rememberNavController()
    homescreen(navController = navController)
}




-------------------------------------

welcomeScreen.kt

package com.example.seatsight.UI

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.sp

// Welcome screen design
//TODO: functionality is required for the BUTTON "Continue" -> Done
//TODO: functionality is required to add homescreen especially listMenu "Menu" button also homescreen's bookseats and viewseats button
@Composable
 fun welcomeScreen(modifier: Modifier = Modifier,
                   onClickContinue: () -> Unit) {

    Surface(
        modifier = Modifier.fillMaxSize(),
    ) {

        Column(

            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "Welcome to the SeatSight",
                fontSize = 26.sp,
            )

            Button(
                onClick = onClickContinue,
                modifier = modifier.padding(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(android.graphics.Color.parseColor("#302F2F"))
                )
            ) {
                Text(
                    text = "Continue",
                    color = Color(android.graphics.Color.parseColor("#F7F7F7")),


                    )
            }
        }


    }


}




-------------------------------------

BookSeatScreen.kt

package com.example.seatsight.UI

import HotelViewModel
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.selection.toggleable
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.semantics.Role
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
import com.example.seatsight.bookingConfirmation
import com.example.seatsight.data.model.MenuItem
import com.example.seatsight.data.model.Seat
import com.example.seatsight.data.repository.HotelRepository
import androidx.compose.foundation.lazy.items


val buttonColorBook = Color(android.graphics.Color.parseColor("#045F1F"))
val buttonColorBookSelected = Color(android.graphics.Color.parseColor("#41644A"))
val seatList = listOf("S1", "S2", "S3", "S4") // More seats for better UI
@Composable
fun BookSeatScreen(
    hotelName: String,
    restaurantId: Int,
    navController: NavController
) {
    val background = Color(android.graphics.Color.parseColor("#D9D9D9"))
    val containerColor = Color(android.graphics.Color.parseColor("#FFFFFF"))
    val selectedSeats = remember { mutableStateOf(setOf<Int>()) }
    val selectedItems = remember { mutableStateMapOf<MenuItem, Int>() }

    val repository = remember { HotelRepository() }
    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository))
    val seatList by viewModel.seatList.collectAsState()
    val menuList by viewModel.menuList.collectAsState()

    var isSeatSelected by remember { mutableStateOf(false) }
    var isMenuSelected by remember { mutableStateOf(false) }

    LaunchedEffect(restaurantId) {
        Log.d("BookSeatScreen", "Fetching seats and menu for restaurantId: $restaurantId")
        viewModel.fetchSeats(restaurantId)
        viewModel.fetchMenu(restaurantId)
    }

    // **Update states when selection changes**
    LaunchedEffect(selectedSeats.value, selectedItems) {
        isSeatSelected = selectedSeats.value.isNotEmpty()
        isMenuSelected = selectedItems.values.any { it > 0 }
    }

    Surface(
        modifier = Modifier.fillMaxSize().background(background),
        color = background
    ) {
        Column(
            modifier = Modifier.fillMaxSize().padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = hotelName,
                fontSize = 26.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.fillMaxWidth().padding(vertical = 16.dp),
                textAlign = TextAlign.Center
            )

            Spacer(modifier = Modifier.height(8.dp))

            LazyColumn(
                modifier = Modifier.weight(1f)
            ) {
                item {
                    // **Seat Selection Container**
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(250.dp)
                            .clip(RoundedCornerShape(16.dp))
                            .border(1.dp, Color.Gray, RoundedCornerShape(16.dp))
                            .background(containerColor)
                            .padding(16.dp)
                    ) {
                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                            Text(
                                text = "Select Your Seats",
                                fontSize = 20.sp,
                                fontWeight = FontWeight.SemiBold,
                                modifier = Modifier.padding(bottom = 8.dp)
                            )

                            if (seatList.isEmpty()) {
                                Text("No seats available", fontSize = 16.sp, color = Color.Gray)
                            } else {
                                SeatSelector(seatList, selectedSeats)
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // **Menu Selection Container - Disabled until a seat is selected**
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(250.dp)
                            .clip(RoundedCornerShape(16.dp))
                            .border(1.dp, Color.Gray, RoundedCornerShape(16.dp))
                            .background(if (isSeatSelected) containerColor else Color.LightGray) // ✅ Disable visually
                            .padding(16.dp)
                    ) {
                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                            Text(
                                text = "Select Menu Items",
                                fontSize = 20.sp,
                                fontWeight = FontWeight.SemiBold,
                                modifier = Modifier.padding(bottom = 8.dp)
                            )

                            if (menuList.isEmpty()) {
                                Text("No menu available", fontSize = 16.sp, color = Color.Gray)
                            } else {
                                LazyColumn(modifier = Modifier.fillMaxHeight()) {
                                    items(menuList) { menuItem ->
                                        MenuItemCard(menuItem, selectedItems, isSeatSelected) // ✅ Pass disabled state
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // **Fixed Confirm Button**
            ButtonForBookAndView(
                isEnabled = isSeatSelected || isMenuSelected, // ✅ Updated condition
                selectedSeats = selectedSeats.value.map { it.toString() }.toSet(),
                selectedItems = selectedItems.mapKeys { it.key.name ?: "Unknown" },
                navController = navController,
                hotelName = hotelName
            )
        }
    }
}





// **Seat Selection Grid**
@Composable
fun SeatSelector(
    seatList: List<Seat>,
    selectedSeats: MutableState<Set<Int>>
) {
    LazyVerticalGrid(
        columns = GridCells.Fixed(4),
        modifier = Modifier
            .height(250.dp)
            .fillMaxWidth()
    ) {
        items(seatList.size) { index ->
            val seat = seatList[index]
            val isSelected = selectedSeats.value.contains(seat.seatNumber)
            val isBooked = seat.isBooked

            Log.d("SeatSelection", "Seat ${seat.seatNumber}: isSelected = $isSelected")

            Box(
                modifier = Modifier
                    .padding(8.dp)
                    .size(70.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .border(color = Color.DarkGray, width = 1.dp, shape = RoundedCornerShape(12.dp))
                    .background(
                        color = when {
                            isBooked -> Color.Red
                            isSelected -> buttonColorBookSelected
                            else -> Color.LightGray
                        },
                        shape = RoundedCornerShape(10.dp)
                    )
                    .toggleable(
                        value = isSelected,
                        onValueChange = { selected ->
                            if (!isBooked) {
                                selectedSeats.value = if (selected) {
                                    selectedSeats.value + seat.seatNumber
                                } else {
                                    selectedSeats.value - seat.seatNumber
                                }
                            }
                        },
                        role = Role.Button
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = seat.seatNumber.toString(),
                    color = Color.Black,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}




// **Menu Item UI**
@Composable
fun MenuItemCard(
    menuItem: MenuItem,
    selectedItems: MutableMap<MenuItem, Int>,
    isEnabled: Boolean // ✅ Pass enabled state
) {
    val quantity = selectedItems[menuItem] ?: 0

    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        shape = RoundedCornerShape(12.dp),
        color = if (isEnabled) Color.LightGray else Color.Gray // ✅ Disable visually
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = menuItem.name,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = "₹${menuItem.price}",
                    fontSize = 16.sp
                )
            }

            Row(verticalAlignment = Alignment.CenterVertically) {
                IconButton(
                    onClick = {
                        if (quantity > 0) {
                            selectedItems[menuItem] = quantity - 1
                        }
                    },
                    enabled = isEnabled // ✅ Disable buttons when menu is disabled
                ) {
                    Text(text = "-", fontSize = 24.sp)
                }
                Text(text = quantity.toString(), fontSize = 18.sp)
                IconButton(
                    onClick = {
                        selectedItems[menuItem] = quantity + 1
                    },
                    enabled = isEnabled // ✅ Disable buttons when menu is disabled
                ) {
                    Text(text = "+", fontSize = 24.sp)
                }
            }
        }
    }
}








// **Book Button**
@Composable
fun ButtonForBookAndView(
    isEnabled: Boolean, // ✅ Control enabled state
    selectedSeats: Set<String>,
    selectedItems: Map<String, Int>,
    navController: NavController,
    hotelName: String
) {


    Button(
        onClick = {
            val seatListString = selectedSeats.joinToString(",")

            val menuListString = selectedItems.entries.joinToString(";") {
                "${it.key.replace(" ", "_")} x${it.value}"
            }

            val formattedRoute = bookingConfirmation.route
                .replace("{hotelName}", hotelName)
                .replace("{selectedSeats}", seatListString)
                .replace("{selectedMenu}", menuListString)

            Log.d("Navigation", "Final Navigation URL: $formattedRoute") // ✅ Debugging Log

            navController.navigate(formattedRoute)


        },
        modifier = Modifier.height(50.dp).width(200.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isEnabled) buttonColorBook else Color.Gray
        ),
        enabled = isEnabled // ✅ Enable only when conditions met
    ) {
        Text(text = "Confirm Booking", fontSize = 18.sp, fontWeight = FontWeight.Bold)
    }
}



// **Preview for Testing**
@Preview
@Composable
fun PreviewBookSeatScreen() {
    val navController = rememberNavController()
    BookSeatScreen(hotelName = "Hotel Ettumanoor", navController = navController, restaurantId = 1)
}




-------------------------------------

viewSeatScreen.kt

////package com.example.seatsight.UI
////
////
////import HotelViewModel
////import android.util.Log
////import androidx.compose.foundation.background
////import androidx.compose.foundation.layout.Column
////import androidx.compose.foundation.layout.Row
////import androidx.compose.foundation.layout.Spacer
////
////import androidx.compose.foundation.layout.fillMaxHeight
////import androidx.compose.foundation.layout.fillMaxSize
////import androidx.compose.foundation.layout.fillMaxWidth
////
////import androidx.compose.foundation.layout.padding
////import androidx.compose.foundation.layout.size
////import androidx.compose.foundation.lazy.LazyColumn
////import androidx.compose.foundation.lazy.grid.GridCells
////import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
////import androidx.compose.foundation.lazy.items
////import androidx.compose.foundation.shape.RoundedCornerShape
////import androidx.compose.material3.MaterialTheme
////
////import androidx.compose.material3.Surface
////import androidx.compose.material3.Text
////import androidx.compose.runtime.Composable
////import androidx.compose.runtime.LaunchedEffect
////import androidx.compose.runtime.collectAsState
////import androidx.compose.runtime.getValue
////import androidx.compose.runtime.remember
////import androidx.compose.ui.Alignment
////
////import androidx.compose.ui.Modifier
////import androidx.compose.ui.graphics.Color
////import androidx.compose.ui.text.font.FontWeight
////import androidx.compose.ui.text.style.TextAlign
////import androidx.compose.ui.tooling.preview.Preview
////import androidx.compose.ui.unit.dp
////import androidx.compose.ui.unit.sp
////import androidx.lifecycle.viewmodel.compose.viewModel
////import androidx.navigation.NavController
////import androidx.navigation.compose.rememberNavController
////import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
////import com.example.seatsight.data.HotelDetails
////import com.example.seatsight.data.model.Seat
////import com.example.seatsight.data.repository.HotelRepository
////
////
////import com.example.seatsight.ui.theme.SeatsightTheme
////@Composable
////fun ViewSeatsScreen(
////    hotelName: String,
////    restaurantId: Int,
////    navController: NavController
////) {
////    val repository = remember { HotelRepository() }
////    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository))
////
////    val seats by viewModel.seatList.collectAsState()
////
////    LaunchedEffect(restaurantId) {
////        viewModel.fetchSeats(restaurantId)
////    }
////
////    Surface(
////        modifier = Modifier.fillMaxSize(),
////        color = surfaceColor
////    ) {
////        Column(
////            modifier = Modifier.fillMaxSize().padding(16.dp),
////            horizontalAlignment = Alignment.CenterHorizontally
////        ) {
////            Text(
////                text = "Seats in $hotelName",
////                fontSize = 26.sp,
////                fontWeight = FontWeight.Bold,
////                textAlign = TextAlign.Center,
////                modifier = Modifier.fillMaxWidth().padding(vertical = 16.dp)
////            )
////
////            if (seats.isEmpty()) {
////                Text(text = "No seats available", fontSize = 18.sp, color = Color.Gray)
////            } else {
////                DisplaySeatsForHotel(seats)
////            }
////        }
////    }
////}
////
////
////@Composable
////fun DisplaySeatsForHotel(seats: List<Seat>) {
////    LazyVerticalGrid(columns = GridCells.Fixed(4), modifier = Modifier.fillMaxSize()) {
////        items(seats.size) { index ->
////            val seat = seats[index]
////            val seatStatus = if (seat.isBooked) "Booked" else "Available"
////            val statusColor = if (seat.isBooked) Color.Red else Color.Green
////
////            Surface(
////                modifier = Modifier
////                    .padding(8.dp)
////                    .size(70.dp),
////                shape = MaterialTheme.shapes.medium,
////                color = statusColor.copy(alpha = 0.3f)
////            ) {
////                Column(
////                    modifier = Modifier.padding(16.dp),
////                    horizontalAlignment = Alignment.CenterHorizontally
////                ) {
////                    Text(text = "Seat ${seat.seatNumber}", fontSize = 18.sp, fontWeight = FontWeight.Bold)
////                    Text(text = seatStatus, fontSize = 16.sp, color = statusColor)
////                }
////            }
////        }
////    }
////}
////
//////@Composable
//////fun DisplaySeatsForHotel(seats: List<Seat>) {
//////    if (seats.isEmpty()) {
//////        Text(
//////            text = "No seat data available.",
//////            fontSize = 18.sp,
//////            fontWeight = FontWeight.Bold,
//////            color = Color.Gray,
//////            modifier = Modifier.padding(16.dp)
//////        )
//////    } else {
//////        LazyColumn(
//////            modifier = Modifier.padding(16.dp)
//////        ) {
//////            items(seats) { seat ->
//////                SeatItem(seat)
//////            }
//////        }
//////    }
//////}
////
////@Preview
////@Composable
////fun PreviewViewSeatsScreen() {
////    val navController = rememberNavController()
////    ViewSeatsScreen(hotelName = "Test Hotel", restaurantId = 1, navController = navController)
////}
//
//package com.example.seatsight.UI
//
//import HotelViewModel
//import android.net.Uri
//import android.util.Log
//import androidx.compose.foundation.background
//import androidx.compose.foundation.border
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.lazy.grid.GridCells
//import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
//import androidx.compose.foundation.lazy.grid.items
//import androidx.compose.foundation.lazy.items
//import androidx.compose.foundation.shape.RoundedCornerShape
//import androidx.compose.material3.CircularProgressIndicator
//import androidx.compose.material3.Surface
//import androidx.compose.material3.Text
//import androidx.compose.runtime.*
//import androidx.compose.runtime.collectAsState
//import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.draw.clip
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.text.font.FontWeight
//import androidx.compose.ui.text.style.TextAlign
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import androidx.lifecycle.viewmodel.compose.viewModel
//import androidx.navigation.NavController
//import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
//import com.example.seatsight.data.model.Seat
//import com.example.seatsight.data.repository.HotelRepository
//
//@Composable
//fun ViewSeatsScreen(
//    hotelName: String,
//    restaurantId: Int,
//    navController: NavController
//) {
//    // Create repository instance and obtain ViewModel.
//    val repository = remember { HotelRepository() }
//    val viewModel = viewModel<HotelViewModel>(factory = HotelViewModelFactory(repository))
//
//    // Collect the latest seats state (could be from a real-time detection flow).
//    val seats by viewModel.seatList.collectAsState()
//
//    // Log the seat count to verify that we're receiving all seats
//    LaunchedEffect(seats) {
//        Log.d("ViewSeatsScreen", "Number of seats fetched: ${seats.size}")
//    }
//
//    // Fetch seats associated with this restaurant.
//    LaunchedEffect(restaurantId) {
//        Log.d("ViewSeatsScreen", "Fetching seats for restaurantId: $restaurantId")
//        viewModel.fetchSeats(restaurantId)
//    }
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//        color = surfaceColor
//    ) {
//        Column(
//            modifier = Modifier
//                .fillMaxSize()
//                .padding(16.dp)
//        ) {
//            Text(
//                text = "Real-Time Seats in ${Uri.decode(hotelName)}",
//                fontSize = 26.sp,
//                fontWeight = FontWeight.Bold,
//                textAlign = TextAlign.Center,
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .padding(bottom = 16.dp)
//            )
//            if (seats.isEmpty()) {
//                Box(
//                    modifier = Modifier.fillMaxSize(),
//                    contentAlignment = Alignment.Center
//                ) {
//                    CircularProgressIndicator()
//                }
//            } else {
//                LazyVerticalGrid(
//                    columns = GridCells.Fixed(4),
//                    modifier = Modifier
//                        .fillMaxSize(),
//                    contentPadding = PaddingValues(8.dp)
//                ) {
//                    // Iterate directly over each seat to ensure all are displayed
//                    items(seats) { seat ->
//                        SeatStatusCard(seat = seat)
//                    }
//                }
//            }
//        }
//    }
//}
//
//@Composable
//fun SeatStatusCard(seat: Seat) {
//    // Determine UI color and status text based on the current seat occupancy state.
//    val backgroundColor = if (seat.isBooked) Color.Red.copy(alpha = 0.3f) else Color.Green.copy(alpha = 0.3f)
//    val statusText = if (seat.isBooked) "Occupied" else "Vacant"
//
//    Surface(
//        modifier = Modifier
//            .padding(8.dp)
//            .size(70.dp)
//            .clip(RoundedCornerShape(12.dp))
//            .border(1.dp, Color.Gray, shape = RoundedCornerShape(12.dp))
//            .background(backgroundColor)
//    ) {
//        Column(
//            modifier = Modifier
//                .padding(8.dp),
//            horizontalAlignment = Alignment.CenterHorizontally,
//            verticalArrangement = Arrangement.Center
//        ) {
//            Text(
//                text = "S${seat.seatNumber}",
//                fontSize = 14.sp,
//                fontWeight = FontWeight.Bold,
//                color = Color.Black,
//                textAlign = TextAlign.Center
//            )
//            Spacer(modifier = Modifier.height(4.dp))
//            Text(
//                text = statusText,
//                fontSize = 12.sp,
//                color = if (seat.isBooked) Color.Red else Color.Green,
//                textAlign = TextAlign.Center
//            )
//        }
//    }
//}

package com.example.seatsight.UI

import HotelViewModel
import android.net.Uri
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
import com.example.seatsight.data.model.RealtimeSeatStatus
import com.example.seatsight.data.model.Seat
import com.example.seatsight.data.network.SseEventSource
import com.example.seatsight.data.repository.HotelRepository
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.collectLatest
import org.json.JSONObject
import java.util.UUID

// Define surface color for consistent UI


/**
 * Screen for displaying real-time seat availability using Server-Sent Events.
 *
 * @param hotelName The name of the hotel/restaurant to display
 * @param restaurantId The ID of the restaurant to fetch seats for
 * @param navController Navigation controller for screen navigation
 */
@Composable
fun ViewSeatsScreen(
    hotelName: String,
    restaurantId: Int,
    navController: NavController
) {
    // Create unique identifier for this screen instance to control lifecycle
    val screenInstanceId = remember { UUID.randomUUID().toString() }
    Log.d("ViewSeatsScreen", "Screen created with ID: $screenInstanceId for restaurant: $restaurantId")

    // Create repository instance and obtain ViewModel for regular seats
    val repository = remember { HotelRepository() }
    val viewModel = viewModel<HotelViewModel>(factory = HotelViewModelFactory(repository))

    // State for regular seats from database
    val databaseSeats by viewModel.seatList.collectAsState()

    // State for real-time seat updates
    val realTimeSeats = remember { mutableStateOf<List<RealtimeSeatStatus>>(emptyList()) }

    // Flag to determine if we're using real-time data
    val usingRealTimeData = remember { mutableStateOf(false) }

    // Create SSE event source for real-time updates
    val sseEventSource = remember { SseEventSource() }

    // Display status for debugging
    val connectionStatus = remember { mutableStateOf("Initializing...") }

    // Connection attempt tracking
    val connectionAttempted = remember { mutableStateOf(false) }

    // First, fetch regular seats as a fallback
    LaunchedEffect(restaurantId) {
        Log.d("ViewSeatsScreen", "Fetching regular seats for restaurant: $restaurantId")
        viewModel.fetchSeats(restaurantId)
    }

    // Important: Clean up connections when leaving the screen
    DisposableEffect(screenInstanceId) {
        onDispose {
            Log.d("ViewSeatsScreen", "Screen $screenInstanceId disposed, closing SSE connection")
            try {
                // Explicitly close the connection to prevent resource leaks
                sseEventSource.closeConnection()

                // Reset state flags
                usingRealTimeData.value = false
                connectionAttempted.value = false
            } catch (e: Exception) {
                Log.e("ViewSeatsScreen", "Error during cleanup", e)
            }
        }
    }

    // Establish real-time connection
    LaunchedEffect(screenInstanceId, restaurantId) {
        // Prevent multiple connection attempts
        if (connectionAttempted.value) {
            Log.d("ViewSeatsScreen", "Connection already attempted, skipping")
            return@LaunchedEffect
        }

        connectionAttempted.value = true
        connectionStatus.value = "Connecting to real-time updates..."

        try {
            // First ensure any existing connection is closed
            sseEventSource.closeConnection()

            // Small delay to ensure server processes the previous connection close
            delay(500)

            // Connect to the real-time API
            val serverUrl = "http://192.168.1.11:3003" // ⚠️ Replace with your actual server IP/hostname
            val url = "$serverUrl/api/seats/stream/$restaurantId"

            Log.d("ViewSeatsScreen", "Connecting to SSE endpoint: $url")

            sseEventSource.connect(url)
                .catch { e ->
                    Log.e("ViewSeatsScreen", "Error in SSE connection", e)
                    connectionStatus.value = "Connection error: ${e.message ?: "Unknown error"}"
                    usingRealTimeData.value = false
                }
                .collectLatest { eventData ->
                    try {
                        // Parse the JSON data from the SSE event
                        val jsonObject = JSONObject(eventData)

                        // Check for error messages
                        if (jsonObject.has("error")) {
                            val errorMessage = jsonObject.getString("error")
                            Log.e("ViewSeatsScreen", "Error from server: $errorMessage")
                            connectionStatus.value = "Server error: $errorMessage"
                            return@collectLatest
                        }

                        // Check for heartbeat messages
                        if (jsonObject.has("heartbeat")) {
                            Log.d("ViewSeatsScreen", "Heartbeat received from server")
                            return@collectLatest
                        }

                        // Process seat data
                        if (jsonObject.has("seats")) {
                            val seatsArray = jsonObject.getJSONArray("seats")
                            val updatedSeats = mutableListOf<RealtimeSeatStatus>()

                            for (i in 0 until seatsArray.length()) {
                                val seatObject = seatsArray.getJSONObject(i)

                                // Extract seat properties
                                val seatId = seatObject.getInt("id")
                                val seatNumber = seatObject.getInt("seatNumber")
                                val status = seatObject.getString("status")
                                val isBooked = seatObject.optBoolean("isBooked", false)
                                val posX = seatObject.optInt("posX", 0)
                                val posY = seatObject.optInt("posY", 0)

                                // Create the RealtimeSeatStatus object
                                val seatStatus = RealtimeSeatStatus(
                                    id = seatId,
                                    seatNumber = seatNumber,
                                    status = status,
                                    isBooked = isBooked,
                                    posX = posX,
                                    posY = posY
                                )

                                updatedSeats.add(seatStatus)
                            }

                            if (updatedSeats.isNotEmpty()) {
                                Log.d("ViewSeatsScreen", "Received update with ${updatedSeats.size} seats")
                                realTimeSeats.value = updatedSeats
                                usingRealTimeData.value = true
                                connectionStatus.value = "Connected to real-time updates"
                            }
                        }
                    } catch (e: Exception) {
                        Log.e("ViewSeatsScreen", "Error parsing SSE data", e)
                        connectionStatus.value = "Error processing data: ${e.message}"
                    }
                }
        } catch (e: Exception) {
            Log.e("ViewSeatsScreen", "Failed to connect to real-time updates", e)
            connectionStatus.value = "Could not connect to real-time updates: ${e.message}"
            usingRealTimeData.value = false
        }
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = surfaceColor
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            Text(
                text = "Real-Time Seats in ${Uri.decode(hotelName)}",
                fontSize = 26.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            )

            // Show real-time indicator when connected
            if (usingRealTimeData.value) {
                Text(
                    text = "LIVE",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Red,
                    textAlign = TextAlign.Center,
                    modifier = Modifier
                        .padding(bottom = 8.dp)
                        .align(Alignment.CenterHorizontally)
                )
            }

            // Display seats based on data source (real-time or database)
            if (usingRealTimeData.value) {
                // Real-time seats display
                if (realTimeSeats.value.isEmpty()) {
                    // Show loading indicator if no real-time data yet
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = connectionStatus.value,
                                fontSize = 14.sp,
                                color = Color.Gray,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                } else {
                    // Display real-time seats

                    // Status summary for real-time seats
                    SeatStatusSummary(realTimeSeats.value)

                    // Seat grid for real-time seats
                    LazyVerticalGrid(
                        columns = GridCells.Fixed(4),
                        modifier = Modifier.fillMaxSize(),
                        contentPadding = PaddingValues(8.dp)
                    ) {
                        items(realTimeSeats.value) { seatStatus ->
                            RealtimeSeatStatusCard(seatStatus = seatStatus)
                        }
                    }
                }
            } else {
                // Database seats display
                if (databaseSeats.isEmpty()) {
                    // Show loading indicator if no database data yet
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Loading seats from database...",
                                fontSize = 14.sp,
                                color = Color.Gray,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                } else {
                    // Status summary for database seats
                    SeatStatusSummary(databaseSeats)

                    // Seat grid for database seats
                    LazyVerticalGrid(
                        columns = GridCells.Fixed(4),
                        modifier = Modifier.fillMaxSize(),
                        contentPadding = PaddingValues(8.dp)
                    ) {
                        items(databaseSeats) { seat ->
                            SeatStatusCard(seat = seat)
                        }
                    }
                }
            }
        }
    }
}

/**
 * Shows a summary of seat availability status
 */
@Composable
fun <T> SeatStatusSummary(seats: List<T>) where T : Any {
    // Calculate counts based on type
    val (occupiedCount, availableCount) = when {
        seats.isEmpty() -> Pair(0, 0)
        seats.first() is RealtimeSeatStatus -> {
            val occupied = (seats as List<RealtimeSeatStatus>).count { it.isOccupied() }
            Pair(occupied, seats.size - occupied)
        }
        seats.first() is Seat -> {
            val occupied = (seats as List<Seat>).count { it.isBooked }
            Pair(occupied, seats.size - occupied)
        }
        else -> Pair(0, 0)
    }

    // Display the summary
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp),
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically
    ) {
        // Available indicator
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(end = 16.dp)
        ) {
            Box(
                modifier = Modifier
                    .size(16.dp)
                    .background(Color.Green.copy(alpha = 0.7f), RoundedCornerShape(4.dp))
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text(
                text = "Available: $availableCount",
                fontWeight = FontWeight.Medium,
                fontSize = 14.sp
            )
        }

        // Occupied indicator
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(16.dp)
                    .background(Color.Red.copy(alpha = 0.7f), RoundedCornerShape(4.dp))
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text(
                text = "Occupied: $occupiedCount",
                fontWeight = FontWeight.Medium,
                fontSize = 14.sp
            )
        }
    }
}

/**
 * Card to display a regular Seat from the database
 */
@Composable
fun SeatStatusCard(seat: Seat) {
    // Determine UI color and status text based on the current seat occupancy state.
    val backgroundColor = if (seat.isBooked) Color.Red.copy(alpha = 0.3f) else Color.Green.copy(alpha = 0.3f)
    val statusText = if (seat.isBooked) "Occupied" else "Vacant"

    Surface(
        modifier = Modifier
            .padding(8.dp)
            .size(70.dp)
            .clip(RoundedCornerShape(12.dp))
            .border(1.dp, Color.Gray, shape = RoundedCornerShape(12.dp))
            .background(backgroundColor)
    ) {
        Column(
            modifier = Modifier
                .padding(8.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "S${seat.seatNumber}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                textAlign = TextAlign.Center
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = statusText,
                fontSize = 12.sp,
                color = if (seat.isBooked) Color.Red else Color.Green,
                textAlign = TextAlign.Center
            )
        }
    }
}

/**
 * Card to display a RealtimeSeatStatus from the SSE API
 */
@Composable
fun RealtimeSeatStatusCard(seatStatus: RealtimeSeatStatus) {
    // Use the helper functions from RealtimeSeatStatus
    val isOccupied = seatStatus.isOccupied()
    val backgroundColor = if (isOccupied) Color.Red.copy(alpha = 0.3f) else Color.Green.copy(alpha = 0.3f)
    val statusText = seatStatus.getStatusText()

    Surface(
        modifier = Modifier
            .padding(8.dp)
            .size(70.dp)
            .clip(RoundedCornerShape(12.dp))
            .border(1.dp, Color.Gray, shape = RoundedCornerShape(12.dp))
            .background(backgroundColor)
    ) {
        Column(
            modifier = Modifier
                .padding(8.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "S${seatStatus.seatNumber}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                textAlign = TextAlign.Center
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = statusText,
                fontSize = 12.sp,
                color = if (isOccupied) Color.Red else Color.Green,
                textAlign = TextAlign.Center
            )
        }
    }
}




-------------------------------------

viewSeatHotelSelector.kt

//package com.example.seatsight.UI
//
//
//import HotelViewModel
//import android.net.Uri
//import android.util.Log
//import androidx.compose.foundation.background
//import androidx.compose.foundation.layout.Column
//
//import androidx.compose.foundation.layout.fillMaxHeight
//import androidx.compose.foundation.layout.fillMaxSize
//import androidx.compose.foundation.layout.fillMaxWidth
//
//import androidx.compose.foundation.layout.padding
//
//import androidx.compose.material3.Surface
//import androidx.compose.material3.Text
//import androidx.compose.runtime.Composable
//import androidx.compose.runtime.LaunchedEffect
//import androidx.compose.runtime.collectAsState
//import androidx.compose.runtime.getValue
//import androidx.compose.runtime.remember
//
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.text.font.FontWeight
//import androidx.compose.ui.tooling.preview.Preview
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import androidx.lifecycle.viewmodel.compose.viewModel
//import androidx.navigation.NavController
//import androidx.navigation.compose.rememberNavController
//import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
//import com.example.seatsight.data.HotelDetails
//import com.example.seatsight.data.repository.HotelRepository
//
//
//import com.example.seatsight.ui.theme.SeatsightTheme
//
//@Composable
//fun ViewSeatsWindow(
//    navController: NavController, // Ensure NavController is passed
//    modifier: Modifier = Modifier
//) {
//    val repository = remember { HotelRepository() } // ✅ Create repository instance
//    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository)) // ✅ Use ViewModel Factory
//
//    val hotels by viewModel.hotelList.collectAsState() // ✅ Fetch dynamic hotel list
//
//    LaunchedEffect(true) {
//        viewModel.fetchHotels() // ✅ Fetch real hotels
//    }
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//        color = surfaceColor
//    ) {
//        Column(
//            modifier = Modifier
//                .padding(vertical = 1.dp, horizontal = 10.dp)
//                .background(surfaceColor)
//        ) {
//            Surface(
//                modifier = Modifier.padding(top = 24.dp)
//            ) {
//                Column(
//                    modifier = Modifier
//                        .background(surfaceColor)
//                        .fillMaxWidth()
//                        .fillMaxHeight()
//                ) {
//                    Surface {
//                        Column(
//                            modifier = Modifier.background(surfaceColor)
//                        ) {
//                            Text(
//                                text = "Available Hotels",
//                                fontSize = 32.sp,
//                                fontWeight = FontWeight.SemiBold,
//                                modifier = Modifier
//                                    .padding(bottom = 18.dp)
//                                    .padding(start = 10.dp)
//                            )
//
//                            // ✅ Pass real hotels from API for Viewing Seats
//                            DisplaylistofHotelsForViewing(
//                                hotelDetail = hotels.map { apiHotel ->
//                                    HotelDetails(
//                                        name = apiHotel.hotel_name,
//                                        description = "Description Not Available",
//                                        menuItems = emptyList(),
//                                        restaurantId = apiHotel.restaurant_id
//                                    )
//                                },
//                                onHotelSelected = { hotelName, restaurantId ->
//                                    Log.d("ViewSeatsWindow", "Navigating to ViewSeatsScreen with: hotelName=$hotelName, restaurantId=$restaurantId")
//
//                                    val encodedHotelName = Uri.encode(hotelName) // ✅ Encode the hotel name properly
//                                    val formattedRoute = "viewSeatScreen/$encodedHotelName/$restaurantId"
//
//                                    Log.d("Navigation", "Navigating to: $formattedRoute") // ✅ Debug log
//                                    navController.navigate(formattedRoute)
//                                }
//
//
//                            )
//
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
//
//@Preview
//@Composable
//fun viewSeatWindow(){
//    SeatsightTheme {
//        val navController = rememberNavController()
//        ViewSeatsWindow(navController = navController)
//    }
//}

//package com.example.seatsight.UI
//
//import HotelViewModel
//import android.net.Uri
//import android.util.Log
//import androidx.compose.foundation.background
//import androidx.compose.foundation.layout.Column
//import androidx.compose.foundation.layout.fillMaxHeight
//import androidx.compose.foundation.layout.fillMaxSize
//import androidx.compose.foundation.layout.fillMaxWidth
//import androidx.compose.foundation.layout.padding
//import androidx.compose.material3.Surface
//import androidx.compose.material3.Text
//import androidx.compose.runtime.Composable
//import androidx.compose.runtime.LaunchedEffect
//import androidx.compose.runtime.collectAsState
//import androidx.compose.runtime.getValue
//import androidx.compose.runtime.remember
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
//import com.example.seatsight.data.HotelDetails
//import com.example.seatsight.data.repository.HotelRepository
//import androidx.lifecycle.viewmodel.compose.viewModel
//import androidx.navigation.NavController
//
//
//@Composable
//fun ViewSeatsWindow(
//    navController: NavController,
//    modifier: Modifier = Modifier
//) {
//    val repository = remember { HotelRepository() }
//    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository))
//    val hotels by viewModel.hotelList.collectAsState()
//
//    // Fetch hotel list once on composition
//    LaunchedEffect(true) {
//        viewModel.fetchHotels()
//    }
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//        color = surfaceColor
//    ) {
//        Column(
//            modifier = Modifier
//                .padding(vertical = 1.dp, horizontal = 10.dp)
//                .background(surfaceColor)
//        ) {
//            Surface(
//                modifier = Modifier.padding(top = 24.dp)
//            ) {
//                Column(
//                    modifier = Modifier
//                        .background(surfaceColor)
//                        .fillMaxWidth()
//                        .fillMaxHeight()
//                ) {
//                    Surface {
//                        Column(
//                            modifier = Modifier.background(surfaceColor)
//                        ) {
//                            Text(
//                                text = "Available Hotels",
//                                fontSize = 32.sp,
//                                fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold,
//                                modifier = Modifier
//                                    .padding(bottom = 18.dp)
//                                    .padding(start = 10.dp)
//                            )
//                            // Map API hotels to HotelDetails and display the list
//                            DisplaylistofHotelsForViewing(
//                                hotelDetail = hotels.map { apiHotel ->
//                                    HotelDetails(
//                                        name = apiHotel.hotel_name ?: "Unnamed Hotel",
//                                        description = "Description Not Available",
//                                        menuItems = emptyList(),
//                                        restaurantId = apiHotel.restaurant_id
//                                    )
//                                },
//                                onHotelSelected = { hotelName, restaurantId ->
//                                    Log.d("ViewSeatsWindow", "Navigating to ViewSeatsScreen with: hotelName=$hotelName, restaurantId=$restaurantId")
//                                    // Encode the hotel name and construct the route
//                                    val encodedHotelName = Uri.encode(hotelName)
//                                    val formattedRoute = "viewSeatScreen/$encodedHotelName/$restaurantId"
//                                    Log.d("Navigation", "Navigating to: $formattedRoute")
//                                    navController.navigate(formattedRoute)
//                                }
//                            )
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

//package com.example.seatsight.UI
//
//import HotelViewModel
//import android.net.Uri
//import android.util.Log
//import androidx.compose.foundation.background
//import androidx.compose.foundation.layout.Column
//import androidx.compose.foundation.layout.fillMaxHeight
//import androidx.compose.foundation.layout.fillMaxSize
//import androidx.compose.foundation.layout.fillMaxWidth
//import androidx.compose.foundation.layout.padding
//import androidx.compose.material3.Surface
//import androidx.compose.material3.Text
//import androidx.compose.runtime.Composable
//import androidx.compose.runtime.LaunchedEffect
//import androidx.compose.runtime.collectAsState
//import androidx.compose.runtime.getValue
//import androidx.compose.runtime.remember
//import androidx.compose.runtime.rememberCoroutineScope
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import androidx.lifecycle.viewmodel.compose.viewModel
//import androidx.navigation.NavController
//import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
//import com.example.seatsight.data.HotelDetails
//import com.example.seatsight.data.repository.HotelRepository
//import com.example.seatsight.data.repository.ViewSeatRepository
//import kotlinx.coroutines.Dispatchers
//import kotlinx.coroutines.launch
//import kotlinx.coroutines.withContext
//
//@Composable
//fun ViewSeatsWindow(
//    navController: NavController,
//    modifier: Modifier = Modifier
//) {
//    val repository = remember { HotelRepository() }
//    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository))
//    val hotels by viewModel.hotelList.collectAsState()
//    val coroutineScope = rememberCoroutineScope()
//
//    // Fetch hotel list once on composition
//    LaunchedEffect(true) {
//        viewModel.fetchHotels()
//    }
//
//    Surface(
//        modifier = Modifier.fillMaxSize(),
//        color = surfaceColor
//    ) {
//        Column(
//            modifier = Modifier
//                .padding(vertical = 1.dp, horizontal = 10.dp)
//                .background(surfaceColor)
//        ) {
//            Surface(
//                modifier = Modifier.padding(top = 24.dp)
//            ) {
//                Column(
//                    modifier = Modifier
//                        .background(surfaceColor)
//                        .fillMaxWidth()
//                        .fillMaxHeight()
//                ) {
//                    Surface {
//                        Column(
//                            modifier = Modifier.background(surfaceColor)
//                        ) {
//                            Text(
//                                text = "Available Hotels",
//                                fontSize = 32.sp,
//                                fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold,
//                                modifier = Modifier
//                                    .padding(bottom = 18.dp)
//                                    .padding(start = 10.dp)
//                            )
//                            // Map API hotels to HotelDetails and display the list
//                            DisplaylistofHotelsForViewing(
//                                hotelDetail = hotels.map { apiHotel ->
//                                    HotelDetails(
//                                        name = apiHotel.hotel_name ?: "Unnamed Hotel",
//                                        description = "Description Not Available",
//                                        menuItems = emptyList(),
//                                        restaurantId = apiHotel.restaurant_id
//                                    )
//                                },
//                                onHotelSelected = { hotelName, restaurantId ->
//                                    Log.d(
//                                        "ViewSeatsWindow",
//                                        "Navigating to ViewSeatsScreen with: hotelName=$hotelName, restaurantId=$restaurantId"
//                                    )
//                                    // Encode the hotel name and construct the route
//                                    val encodedHotelName = Uri.encode(hotelName)
//                                    val formattedRoute = "viewSeatScreen/$encodedHotelName/$restaurantId"
//                                    Log.d("Navigation", "Navigating to: $formattedRoute")
//
//                                    // Post the restaurant_id without disrupting the current functionality
//                                    coroutineScope.launch {
//                                        val viewSeatRepository = ViewSeatRepository()
//                                        val response = withContext(Dispatchers.IO) {
//                                            viewSeatRepository.postRestaurantId(restaurantId).execute()
//                                        }
//                                        if (response.isSuccessful) {
//                                            navController.navigate(formattedRoute)
//                                        } else {
//                                            Log.e(
//                                                "ViewSeatsWindow",
//                                                "Failed to post restaurant_id: ${response.errorBody()?.string()}"
//                                            )
//                                        }
//                                    }
//                                }
//                            )
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

package com.example.seatsight.UI

import HotelViewModel
import android.net.Uri
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
import com.example.seatsight.data.HotelDetails
import com.example.seatsight.data.repository.HotelRepository
import com.example.seatsight.data.repository.ViewSeatRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

@Composable
fun ViewSeatsWindow(
    navController: NavController,
    modifier: Modifier = Modifier
) {
    val repository = remember { HotelRepository() }
    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository))
    val hotels by viewModel.hotelList.collectAsState()
    val coroutineScope = rememberCoroutineScope()

    // Fetch hotel list once on composition
    LaunchedEffect(true) {
        viewModel.fetchHotels()
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = surfaceColor
    ) {
        Column(
            modifier = Modifier
                .padding(vertical = 1.dp, horizontal = 10.dp)
                .background(surfaceColor)
        ) {
            Surface(
                modifier = Modifier.padding(top = 24.dp)
            ) {
                Column(
                    modifier = Modifier
                        .background(surfaceColor)
                        .fillMaxWidth()
                        .fillMaxHeight()
                ) {
                    Surface {
                        Column(
                            modifier = Modifier.background(surfaceColor)
                        ) {
                            Text(
                                text = "Available Hotels",
                                fontSize = 32.sp,
                                fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold,
                                modifier = Modifier
                                    .padding(bottom = 18.dp)
                                    .padding(start = 10.dp)
                            )
                            // Map API hotels to HotelDetails and display the list
                            DisplaylistofHotelsForViewing(
                                hotelDetail = hotels.map { apiHotel ->
                                    HotelDetails(
                                        name = apiHotel.hotel_name ?: "Unnamed Hotel",
                                        description = "Description Not Available",
                                        menuItems = emptyList(),
                                        restaurantId = apiHotel.restaurant_id
                                    )
                                },
                                onHotelSelected = { hotelName, restaurantId ->
                                    Log.d(
                                        "ViewSeatsWindow",
                                        "Navigating to ViewSeatsScreen with: hotelName=$hotelName, restaurantId=$restaurantId"
                                    )
                                    // Encode the hotel name and construct the route
                                    val encodedHotelName = Uri.encode(hotelName)
                                    val formattedRoute = "viewSeatScreen/$encodedHotelName/$restaurantId"
                                    Log.d("Navigation", "Navigating to: $formattedRoute")

                                    // Get the restaurant_id without disrupting the current functionality
                                    coroutineScope.launch {
                                        val viewSeatRepository = ViewSeatRepository()
                                        val response = withContext(Dispatchers.IO) {
                                            viewSeatRepository.getRestaurantId(restaurantId).execute()
                                        }
                                        if (response.isSuccessful) {
                                            navController.navigate(formattedRoute)
                                        } else {
                                            Log.e(
                                                "ViewSeatsWindow",
                                                "Failed to get restaurant_id: ${response.errorBody()?.string()}"
                                            )
                                        }
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }
    }
}




-------------------------------------

bookSeatHotelAvailbility.kt

package com.example.seatsight.UI

import HotelViewModel
import android.net.Uri
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.seatsight.UI.viewmodel.HotelViewModelFactory
import com.example.seatsight.bookSeatScreen
import com.example.seatsight.data.HotelDetails
import com.example.seatsight.data.repository.HotelRepository
import com.example.seatsight.ui.theme.SeatsightTheme

@Composable
fun BookSeatWindow(
    navController: NavController, // Ensure NavController is passed
    modifier: Modifier = Modifier
) {
    val repository = remember { HotelRepository() } // ✅ Create repository instance
    val viewModel: HotelViewModel = viewModel(factory = HotelViewModelFactory(repository)) // ✅ Use ViewModel Factory

    val hotels by viewModel.hotelList.collectAsState() // ✅ Fetch dynamic hotel list


    LaunchedEffect(true) {
        viewModel.fetchHotels() // ✅ Fetch real hotels
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = surfaceColor
    ) {
        Column(
            modifier = Modifier
                .padding(vertical = 1.dp, horizontal = 10.dp)
                .background(surfaceColor)
        ) {
            Surface(
                modifier = Modifier.padding(top = 24.dp)
            ) {
                Column(
                    modifier = Modifier
                        .background(surfaceColor)
                        .fillMaxWidth()
                        .fillMaxHeight()
                ) {
                    Surface {
                        Column(
                            modifier = Modifier.background(surfaceColor)
                        ) {
                            Text(
                                text = "Available Hotels",
                                fontSize = 32.sp,
                                fontWeight = FontWeight.SemiBold,
                                modifier = Modifier
                                    .padding(bottom = 18.dp)
                                    .padding(start = 10.dp)
                            )

                            // ✅ Pass real hotels from API
                            DisplaylistofAvailableHotels(
                                hotelDetail = hotels.map { apiHotel ->
                                    Log.d("BookSeatWindow", "Mapping hotel: ${apiHotel.hotel_name}, ID: ${apiHotel.restaurant_id}") // ✅ Debug log

                                    HotelDetails(
                                        name = apiHotel.hotel_name,
                                        description = "Description Not Available",
                                        menuItems = emptyList(),
                                        restaurantId = apiHotel.restaurant_id // ✅ Ensure restaurantId is mapped
                                    )
                                },
                                onHotelSelected = { hotelName, restaurantId ->
                                    Log.d("BookSeatWindow", "Navigating to BookSeatScreen with ID: $restaurantId") // ✅ Debug log
                                    val formattedRoute = "bookSeatScreen/${hotelName}/${restaurantId}" // ✅ Ensure proper string formatting

                                    Log.d("Navigation", "Navigating to: $formattedRoute") // ✅ Debug log
                                    navController.navigate(formattedRoute)


                                }
                            )



                        }
                    }
                }
            }
        }
    }
}



@Preview
@Composable
fun bookSeatWindow(){
    SeatsightTheme {
        val navController = rememberNavController()
        BookSeatWindow(navController = navController)
        }
    }




-------------------------------------

listAndDisplayHotelAvailability.kt

package com.example.seatsight.UI

import HotelViewModel
import android.util.Log
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.seatsight.data.HotelDetails
import com.example.seatsight.data.model.HotelResponse

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//hotel's name and description is maintained here
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@Composable
fun listofAvailableHotels(
    hotel: HotelDetails,
    onHotelSelected: (String, Int) -> Unit
) {
    val buttonColor = Color(android.graphics.Color.parseColor("#BB0000"))
    val textColor = Color(android.graphics.Color.parseColor("#EFEFEF"))
    val containerColor = Color(android.graphics.Color.parseColor("#F0EBEB"))

    Surface(
        modifier = Modifier.padding(vertical = 10.dp, horizontal = 10.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier
                .background(containerColor)
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Column(
                    modifier = Modifier.weight(0.7f)
                ) {
                    Text(
                        text = hotel.name,
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = hotel.description,
                        fontSize = 16.sp
                    )
                }

                Button(
                    onClick = {
                        Log.d("listofAvailableHotels", "Clicked hotel: ${hotel.name}, ID: ${hotel.restaurantId}") // ✅ Debugging log
                        onHotelSelected(hotel.name, hotel.restaurantId) // ✅ Ensure `restaurantId` is passed
                    },
                    colors = ButtonDefaults.buttonColors(buttonColor)
                ) {
                    Text(text = "Book Seat", color = textColor)
                }
            }
        }
    }
}





//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//this composable is responsible for the display of scrollable hotel details with each hotel details
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@Composable
fun DisplaylistofAvailableHotels(
    hotelDetail: List<HotelDetails>,
    onHotelSelected: (String, Int) -> Unit // ✅ Pass restaurantId too
) {
    LazyColumn(
        modifier = Modifier.padding(horizontal = 0.dp)
    ) {
        items(items = hotelDetail) { hotel ->
            listofAvailableHotels(hotel = hotel, onHotelSelected = onHotelSelected)
        }
    }
}



@Composable
fun listMenuForHome(
    modifier: Modifier = Modifier,
    hotel: HotelResponse,
) {
    val menuButtonColor = Color(android.graphics.Color.parseColor("#BB0000"))
    val menuTextColor = Color(android.graphics.Color.parseColor("#EFEFEF"))
    val menuContainerColor = Color(android.graphics.Color.parseColor("#F0EBEB"))

    var expandMenuButton by remember { mutableStateOf(false) }
    val expandMenuPadding by animateDpAsState(targetValue = if (expandMenuButton) 50.dp else 0.dp)

    Surface(
        modifier = modifier.padding(vertical = 10.dp, horizontal = 10.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier
                .background(menuContainerColor)
                .padding(bottom = expandMenuPadding),
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(100.dp),
                verticalAlignment = Alignment.CenterVertically,
            ) {
                Column(
                    modifier = Modifier.weight(0.5f)
                ) {
                    Text(
                        text = hotel.hotel_name, // ✅ Correct property name
                        modifier = Modifier
                            .padding(vertical = 5.dp, horizontal = 0.dp)
                            .padding(start = 8.dp),
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
                Button(
                    onClick = { expandMenuButton = !expandMenuButton },
                    modifier = Modifier.padding(end = 8.dp),
                    colors = ButtonDefaults.buttonColors(menuButtonColor)
                ) {
                    Text(
                        text = if (expandMenuButton) "Close Menu" else "Menu",
                        color = menuTextColor
                    )
                }
            }

            if (expandMenuButton) {
                Column(modifier = Modifier.padding(start = 8.dp, top = 8.dp)) {
                    hotel.menu.forEach { menuItem ->
                        Text(
                            text = "• ${menuItem.name} - ₹${menuItem.price}",
                            fontSize = 14.sp,
                            modifier = Modifier.padding(vertical = 2.dp)
                        )
                    }
                }
            }
        }
    }
}



//@Composable
//fun displayListMenuForHome(
//    modifier: Modifier = Modifier,
//    hotelDetail: List<HotelDetails>
//) {
//    LazyColumn(
//        modifier = modifier.padding(horizontal = 0.dp)
//    ) {
//        items(items = hotelDetail) { hotel ->
//            listMenuForHome(hotel = hotel) // Uses the version without seat booking
//        }
//    }
//}
@Composable
fun displayListMenuForHome(
    modifier: Modifier = Modifier,
    hotelDetail: List<HotelResponse> // ✅ Properly receives hotel list
) {
    LazyColumn(
        modifier = Modifier.padding(horizontal = 0.dp)
    ) {
        items(hotelDetail) { hotel ->
            listMenuForHome(hotel = hotel)
        }
    }
}

// for view seats button
//@Composable
//fun listofHotelsForViewing(
//    hotel: HotelDetails,
//    onHotelSelected: (String, Int) -> Unit
//) {
//    val buttonColor = Color(android.graphics.Color.parseColor("#005BBB")) // Different color for view seats
//    val textColor = Color(android.graphics.Color.parseColor("#EFEFEF"))
//    val containerColor = Color(android.graphics.Color.parseColor("#F0EBEB"))
//
//    Surface(
//        modifier = Modifier.padding(vertical = 10.dp, horizontal = 10.dp),
//        shape = RoundedCornerShape(12.dp)
//    ) {
//        Column(
//            modifier = Modifier
//                .background(containerColor)
//                .padding(16.dp)
//        ) {
//            Row(
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .height(80.dp),
//                verticalAlignment = Alignment.CenterVertically,
//                horizontalArrangement = Arrangement.SpaceBetween
//            ) {
//                Column(
//                    modifier = Modifier.weight(0.7f)
//                ) {
//                    Text(
//                        text = hotel.name,
//                        fontSize = 20.sp,
//                        fontWeight = FontWeight.Bold
//                    )
//                    Text(
//                        text = hotel.description,
//                        fontSize = 16.sp
//                    )
//                }
//
//                Button(
//                    onClick = {
//                        Log.d("listofHotelsForViewing", "Viewing seats for hotel: ${hotel.name}, ID: ${hotel.restaurantId}")
//                        onHotelSelected(hotel.name, hotel.restaurantId) // Navigate to view seats
//                    },
//                    colors = ButtonDefaults.buttonColors(buttonColor)
//                ) {
//                    Text(text = "View Seats", color = textColor)
//                }
//            }
//        }
//    }
//}
//
//@Composable
//fun DisplaylistofHotelsForViewing(
//    hotelDetail: List<HotelDetails>,
//    onHotelSelected: (String, Int) -> Unit
//) {
//    LazyColumn(
//        modifier = Modifier.padding(horizontal = 0.dp)
//    ) {
//        items(items = hotelDetail) { hotel ->
//            listofHotelsForViewing(hotel = hotel, onHotelSelected = onHotelSelected)
//        }
//    }
//}
@Composable
fun ListOfHotelsForViewing(
    hotel: HotelDetails,
    onHotelSelected: (String, Int) -> Unit
) {
    // Define colors
    val buttonColor = Color(0xFF005BBB)
    val textColor = Color(0xFFEFEFEF)
    val containerColor = Color(0xFFF0EBEB)

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier
                .background(containerColor)
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(
                    modifier = Modifier.weight(0.7f)
                ) {
                    Text(
                        text = hotel.name,
                        fontSize = 20.sp
                    )
                    Text(
                        text = hotel.description,
                        fontSize = 16.sp
                    )
                }
                Button(
                    onClick = { onHotelSelected(hotel.name, hotel.restaurantId) },
                    colors = ButtonDefaults.buttonColors(buttonColor)
                ) {
                    Text(text = "View Seats", color = textColor)
                }
            }
        }
    }
}

@Composable
fun DisplaylistofHotelsForViewing(
    hotelDetail: List<HotelDetails>,
    onHotelSelected: (String, Int) -> Unit
) {
    LazyColumn {
        items(hotelDetail) { hotel ->
            ListOfHotelsForViewing(hotel = hotel, onHotelSelected = onHotelSelected)
        }
    }
}




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------




-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------



-------------------------------------


