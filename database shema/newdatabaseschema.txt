-- 1️⃣ Owners Table (For Web App)
CREATE TABLE owners (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2️⃣ Customers Table (For Android App)
CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3️⃣ Restaurants Table (Managed by Owners)
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER REFERENCES owners(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    address TEXT NOT NULL,
    ip_camera_url TEXT DEFAULT NULL
);

-- 4️⃣ Menu Items Table (Restaurant Menu)
CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);

-- 5️⃣ Seats Table (Real-time updates from Deep Learning)
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    position_x FLOAT NOT NULL,
    position_y FLOAT NOT NULL,
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL DEFAULT 'vacant'
);

-- 6️⃣ Reservations Table (For Bookings by Customers)
CREATE TABLE reservations (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    customer_id INTEGER REFERENCES customers(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    status VARCHAR(20) CHECK (status IN ('pending', 'confirmed', 'canceled')) NOT NULL DEFAULT 'pending',
    timestamp TIMESTAMP DEFAULT NOW()
);

-- 7️⃣ Live Seat Status Table (Updated by Deep Learning Model)
CREATE TABLE seat_status (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    timestamp TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL
);





















// in use schema

-- ✅ Users Table (No Change)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) CHECK (role IN ('owner', 'customer')) NOT NULL
);

-- ✅ Restaurants Table (Seating Capacity Can Be NULL Initially)
-- ✅ Updated Restaurants Table (Added `ip_camera_url`)
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    seating_capacity INTEGER CHECK (seating_capacity > 0), -- ✅ Nullable initially
    ip_camera_url TEXT DEFAULT NULL -- ✅ New column for storing the IP Camera URL
);

-- ✅ Seats Table (Updated)
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL CHECK (seat_number > 0),
    is_booked BOOLEAN DEFAULT FALSE,
    UNIQUE (restaurant_id, seat_number) -- ✅ Ensure unique seat numbers per restaurant
);


-- ✅ Seat Status Table (Future Deep Learning Model Integration)
CREATE TABLE seat_status (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    timestamp TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL
);

-- ✅ Bookings Table (For Reservations)
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    booking_time TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'pending'
);

CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);









//new o - going


-- ✅ Users Table (No Change)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) CHECK (role IN ('owner', 'customer')) NOT NULL
);

-- ✅ Restaurants Table (Seating Capacity Can Be NULL Initially)
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    seating_capacity INTEGER CHECK (seating_capacity > 0), -- Nullable initially
    ip_camera_url TEXT DEFAULT NULL -- New column for storing the IP Camera URL
);

-- ✅ Seats Table (Updated with Location Coordinates)
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL CHECK (seat_number > 0),
    is_booked BOOLEAN DEFAULT FALSE, -- Indicates if a seat is booked
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) DEFAULT 'vacant', -- NEW: Real-time seat status
    pos_x INTEGER,  -- X-coordinate for AI tracking
    pos_y INTEGER,  -- Y-coordinate for AI tracking
    UNIQUE (restaurant_id, seat_number) -- Ensure unique seat numbers per restaurant
);

-- ✅ Seat Status Table (For Real-Time Occupancy Updates)


CREATE TABLE seat_status (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL,
    timestamp TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL,
    UNIQUE (restaurant_id, seat_number, timestamp)
);


-- ✅ Bookings Table (For Reservations)
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    booking_time TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'pending'
);

CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);



// Currently using schema

-- Users Table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) CHECK (role IN ('owner', 'customer')) NOT NULL
);

-- Restaurants Table
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    seating_capacity INTEGER CHECK (seating_capacity > 0),
    ip_camera_url TEXT DEFAULT NULL
);

-- Seats Table
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number VARCHAR(10) NOT NULL,  -- Changed to VARCHAR to support seat IDs like "S1", "S2"
    is_booked BOOLEAN DEFAULT FALSE,
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied', 'reserved')) DEFAULT 'vacant',
    pos_x INTEGER,  -- X-coordinate for AI tracking
    pos_y INTEGER,  -- Y-coordinate for AI tracking
    UNIQUE (restaurant_id, seat_number)
);

-- Menu Items Table
CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);

-- Bookings Table
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    booking_time_start VARCHAR(5) NOT NULL,  -- Storing time in HH:MM format
    booking_time_end VARCHAR(5) NOT NULL,    -- Storing time in HH:MM format
    status VARCHAR(10) CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'confirmed',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- NEW: Booking Seats Table (Connects bookings with selected seats)
CREATE TABLE booking_seats (
    id SERIAL PRIMARY KEY,
    booking_id INTEGER REFERENCES bookings(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE RESTRICT,
    UNIQUE(booking_id, seat_id)  -- Prevent duplicate seat assignments
);

-- NEW: Booking Menu Items Table (Connects bookings with ordered menu items)
CREATE TABLE booking_menu_items (
    id SERIAL PRIMARY KEY,
    booking_id INTEGER REFERENCES bookings(id) ON DELETE CASCADE,
    menu_item_id INTEGER REFERENCES menu_items(id) ON DELETE RESTRICT,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    UNIQUE(booking_id, menu_item_id)  -- Prevent duplicate menu item entries
);































-- Users Table (No Change)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) CHECK (role IN ('owner', 'customer')) NOT NULL
);

-- Restaurants Table (Allowing one owner to have multiple restaurants)
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    seating_capacity INTEGER CHECK (seating_capacity > 0), -- Nullable initially
    ip_camera_url TEXT DEFAULT NULL
);

-- Seats Table (Stores current seat status and location details)
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL CHECK (seat_number > 0),
    is_booked BOOLEAN DEFAULT FALSE,
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied', 'reserved')) DEFAULT 'vacant',
    pos_x INTEGER,  -- X-coordinate for AI tracking
    pos_y INTEGER,  -- Y-coordinate for AI tracking
    UNIQUE (restaurant_id, seat_number)
);

-- Optional Seat Status Log Table (For keeping a history of seat status changes)
-- Uncomment this if you need to track historical status changes.
-- CREATE TABLE seat_status_log (
--     id SERIAL PRIMARY KEY,
--     seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
--     timestamp TIMESTAMP DEFAULT NOW(),
--     status VARCHAR(10) CHECK (status IN ('vacant', 'occupied', 'reserved')) NOT NULL
-- );

-- Bookings Table (Simplified to reference seat; restaurant can be derived via join)
CREATE TABLE IF NOT EXISTS bookings (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    booking_time_start VARCHAR(5) NOT NULL,  -- Storing time in HH:MM format
    booking_time_end VARCHAR(5) NOT NULL,    -- Storing time in HH:MM format
    status VARCHAR(10) CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Menu Items Table (Associated directly with Restaurants)
CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);








//old seat table

CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL CHECK (seat_number > 0),
    is_booked BOOLEAN DEFAULT FALSE,
    pos_x INTEGER,  -- New: X-coordinate of the seat's centroid (or designated position)
    pos_y INTEGER,  -- New: Y-coordinate of the seat's centroid (or designated position)
    UNIQUE (restaurant_id, seat_number) -- Ensure unique seat numbers per restaurant
);
















for seats sechema not in use
//////////

CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    position_x FLOAT NOT NULL,
    position_y FLOAT NOT NULL,
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL DEFAULT 'vacant'
);

CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    ip_camera_url TEXT DEFAULT NULL
);













///////////


-- 1️⃣ Unified Users Table (For Both Owners & Customers)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(10) CHECK (role IN ('owner', 'customer')) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2️⃣ Restaurants Table (Each Restaurant Linked to an Owner)
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    total_seats INTEGER DEFAULT 0 CHECK (total_seats >= 0) -- Owner defines seating capacity
);

-- 3️⃣ Menu Items Table (Restaurant Menu)
CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    price DECIMAL(10,2) NOT NULL
);

-- 4️⃣ Seats Table (Real-time updates from Deep Learning)
CREATE TABLE seats (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_number INTEGER NOT NULL CHECK (seat_number > 0),
    is_booked BOOLEAN DEFAULT FALSE,
    UNIQUE (restaurant_id, seat_number) -- Ensure unique seat numbers per restaurant
);

-- 5️⃣ Reservations Table (For Bookings by Customers)
CREATE TABLE reservations (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    customer_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    status VARCHAR(20) CHECK (status IN ('pending', 'confirmed', 'canceled')) NOT NULL DEFAULT 'pending',
    timestamp TIMESTAMP DEFAULT NOW()
);

-- 6️⃣ Live Seat Status Table (Updated by Deep Learning Model)
CREATE TABLE seat_status (
    id SERIAL PRIMARY KEY,
    restaurant_id INTEGER REFERENCES restaurants(id) ON DELETE CASCADE,
    seat_id INTEGER REFERENCES seats(id) ON DELETE CASCADE,
    timestamp TIMESTAMP DEFAULT NOW(),
    status VARCHAR(10) CHECK (status IN ('vacant', 'occupied')) NOT NULL,
    source VARCHAR(10) CHECK (source IN ('manual', 'ai')) DEFAULT 'manual'
);